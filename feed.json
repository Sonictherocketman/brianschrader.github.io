{"home_page_url": "https://brianschrader.com", "version": "https://jsonfeed.org/version/1", "description": "Thoughts, and ramblings about technology, programming, history, and whatever else I'm interested in.", "feed_url": "https://brianschrader.com/feed.json", "title": "BiteofanApple by Brian Schrader", "items": [{"author": {"name": "Brian Schrader"}, "url": "http://brianschrader.com/archive/mygenerank-behind-the-scenes-of-the-newest-researchkit-app/", "tags": ["django", "software", "technical overview", "review", "researchkit"], "content_html": "<p>I'm super excited to announce that <a href=\"https://mygenerank.scripps.edu\">MyGeneRank</a>, an app that I've been working on at my jobby-job at the <a href=\"https://www.stsiweb.org\">Scripps Translational Science Institute</a> for a year and a half, is now available on the <a href=\"TODO\">App Store</a>, and the source code is <a href=\"https://github.com/TorkamaniLab/mygenerank-api\">available on GitHub</a>!</p>\n<p>I've wanted to talk about this project for a while, I've written many unpublished posts about how it works, and now the time is finally right. If you're looking for the scientific or research parts, I'm going to leave that to <a href=\"http://www.biorxiv.org/content/early/2017/01/19/101519\">the paper we published</a>. I want to talk more about my experiences and what I've learned in building the system.</p>\n<p>As a quick overview: MyGeneRank is a ResearchKit based research study app aimed at providing users with their Genetic Risk for diseases, and measuring their reactions to this information. The first disease being Coronary Artery Disease. I'm definitely not a doctor, statistician, or biologist, and everyone else on the team handled all of the scientific work, but I am a Software Developer and I worked on the vast majority of the <a href=\"https://github.com/TorkamaniLab/mygenerank-api\">API</a>, Computation Engine, <a href=\"https://mygenerank.scripps.edu\">Website</a>, and <a href=\"TODO\">iOS App</a> development, DevOps, and System Administration as the sole developer. I learned a hell of a lot during the last year and a half and looking back, I'm not sure how I even got this far. Since the source code is available, at least for the API, (iOS source is coming) so now you too can see my mistakes and pass judgement! ðŸŽ‰</p>\n<h2>From a Technical Perspective</h2>\n<p>Vaguely, MyGeneRank's backend has three main parts: a database (<a href=\"https://twitter.com/tonymillion/status/417213069572714496\">Postgres</a>), a Django REST API (which is open source), and what we've called a Computation Engine. All of it runs in-house, maintained by yours truly. The API and database are pretty self-explanatory, and the \"engine\" is really a Celery cluster and Redis queue which runs, among other things, a series of Python wrapped command-line tools and custom R scripts to calculate a person's genetic risk given their <a href=\"https://www.23andme.com\">23andMe</a> <a href=\"https://api.23andme.com/docs/reference/\">genotype data</a>. While the computation stuff is a sort of special case (what with the CLI tools and R scripts), the API's design goal was to be as industry-standard practice as possible. It's 90% covered with tests, leverages Travis-CI, uses <a href=\"http://www.django-rest-framework.org\">DRF</a> and <a href=\"http://docs.celeryproject.org/en/latest/index.html\">Celery</a> for the vast majority of its work, and everything runs in Docker containers on CentOS.</p>\n<p>If this stack sounds familiar to readers of this site, then you're catching on. In my post about <a href=\"/archive/adventurers-codex-the-stack/\">Adventurer's Codex's stack</a> I spelled out basically the same setup. In truth the stack for AC was heavily influenced by MyGeneRank. I took everything I learned building MyGeneRank and ported it to Adventurer's Codex a year later. That's how developers work, we do things once, then copy-pasta it everywhere.</p>\n<h2>Scientific Computing at Scale: Performance and Throughput</h2>\n<p>MyGeneRank has very demanding computational needs. Currently, we have <strong>178 cores and almost a terabyte of RAM</strong> powering the app and its backend. Turns out, calculating a person's genetic risk, even using genotyping data and not <a href=\"https://www.illumina.com/science/technology/next-generation-sequencing.html\">NGS</a>, requires a lot of computational power. Scaling this kind of intense scientific computation for public use was one of the most challenging (and enjoyable) parts of the project. But even now I don't really have many concrete answers to the problem other than the twin suggestions: add more cores and make your work as functional and therefore parallel as possible.</p>\n<h4>Into the Weeds for a Bit</h4>\n<p>The calculations needed to return a given user's genetic risk score can be broken into roughly 110 individual tasks and is mostly trivial to parallelize. What takes ~110 minutes of CPU time per user can be done in 3.5-4 minutes of wall time on our current system, but as any web developer knows, even that kind of processing time is hard to scale. The first couple tasks are run in series and then two chunks of tasks are run in parallel. The first chunk contains a single task which calculates the user's genetic ancestry, and the other chunk has 52 two-part tasks. This means that at any one time, 53 tasks per user are running during the bulk of the computation. These first 52 tasks take ~1.5-1.8 minutes each depending on which chromosome they're processing (<a href=\"https://www.youtube.com/watch?v=C906lbkcYug\">some are bigger than others</a>) and then the second batch takes about the same amount of time per chunk. The genetic ancestry takes ~3.2 minutes. Once all of these tasks are complete there's a final step that calculates the actual risk score, which is fairly instantaneous. What this means is that the time from start to finish for a given user's score is parallelize-able up to ~54 cores, then it's core speed that matters, which is harder to improve. The extra cores we have allows us to calculate more scores at once, but <strong>even with our huge core count, we can only calculate ~3-4 users' scores at a time</strong>. The good news is that all of the steps are really good at keeping memory use low; CPUs are the bottleneck here.</p>\n<p>Improving API and Website level performance is much more straightforward than doing the same for the backend. Like most sites, MyGeneRank sits behind an Nginx Reverse Proxy with some out of the box microcaching for popular pages.</p>\n<p>At time of writing, I'm not sure what the load will be like when we finally announce the study publicly, but I've spent a lot of time worrying about and trying to ensure that the site can handle the loads we hope for. There's been a <a href=\"https://www.macworld.com/article/2895941/stanfords-researchkit-app-gained-more-users-in-24-hours-than-most-medical-studies-find-in-a-year.html\">lot</a> of <a href=\"https://www.fastcompany.com/3058125/in-its-first-year-has-apples-researchkit-revolutionized-medical-research\">interesting</a> <a href=\"http://parkinsonsnewstoday.com/2016/03/28/parkinsons-mpower-app-celebrates-milestone-12000-registered-users-upgrade-apple-product-launch/\">news</a> and <a href=\"https://stories.appbot.co/how-i-got-2-3m-app-downloads-without-spending-a-cent-on-marketing-f4823b6bc779\">blog posts</a> over the years about what kind of download numbers an app, and especially a research app can expect, and I wanted to build MyGeneRank with those kinds of numbers in mind. Once the project has hit its first month I'm going to do a retrospective on how it all went and we'll see if my performance enhancements were enough.</p>\n<h2>Lessons Learned</h2>\n<p>There's a lot of little things that I've learned in building MyGeneRank (and later Adventurer's Codex). When we started, I'd worked on a few toy iOS apps and  a few corporate web projects, but MyGeneRank turned out to be of a completely different scale.</p>\n<p>Before MyGeneRank, I'd never used Django, or Django REST. I'd heard of them, and had a friend who used them, but aside from a few <a href=\"https://github.com/HyperTextCoffeePot/HyperTextCoffeePot\">toy projects</a> in Flask, my web experience was in front-ends or Java/Spring (and I guess PHP). My work at that time was mostly in writing <a href=\"https://github.com/TorkamaniLab/metapipe#metapipe\">analysis pipelines in Python</a> and since it's my preferred language, I wanted to use it for MyGeneRank. To this day, the structure of the API project is a little wonky and apps aren't where they should be; both are cruft from those early days. I try not to worry about it too much since I was learning as I went, and this kind of legacy cruft is impossible to avoid unless you knew everything at the start, and we most assuredly didn't. I can say that Django/Django REST has shown me just how boring building websites really is because it does most of it for you automatically and supports anything you'd ever really need right out of the box; you should definitely use it.</p>\n<p>The modern web is really complex and there's a reason that it takes so many skilled developers to build large systems. Server setup, administration, DevOps, reporting, and application development are all sub-disciplines unto themselves (which is why they're separate jobs at most places). And I've found that jumping in and out of these different worlds can result in a sort of Programmer's Jet Lag as your body adjusts to the new environment after spending days in a completely different one.</p>\n<p>On the native side, Apple's frameworks can be fun to use, and their OS frameworks, documentation, and user guides are world-class, but their tooling can also be frustrating and slow at times. The iOS app is written entirely in Swift and that has had some major effects on the development. Swift's tooling is still very new and the language has changed drastically since it came out. Having worked in both, I can say that, while I do enjoy Swift, nothing has made me appreciate the maturity of Python more.</p>\n<p>Overall, my advice for building these kinds of systems is the same as when I wrote a <a href=\"/archive/adventurers-codex-behind-the-curtain/\">similar post about Adventurer's Codex</a>:</p>\n<blockquote>\n<p>...ask people who've done it before... The internet is great, but it's actually pretty difficult to find out how to design modern web systems from scratch with just a vague notion and Google.</p>\n</blockquote>\n<p>MyGeneRank, to me, represents my passing from a junior to a senior developer in a lot of ways. By no means have I learned all there is to know, but having now built two large web projects, and being the  sole developer for one of them, I feel like a different person from the one who started the project a year and a half ago. I'd love to know what you all think of the source, and if you find a bug, file an issue please.</p>", "date_published": "2017-10-25T10:11:00", "title": "MyGeneRank: Behind the Scenes of the Newest ResearchKit App", "id": "http://brianschrader.com/archive/mygenerank-behind-the-scenes-of-the-newest-researchkit-app/"}, {"author": {"name": "Brian Schrader"}, "url": "http://brianschrader.com/archive/oauth-over-xmpp/", "tags": ["django", "software", "xmpp", "oauth", "adventurerscodex"], "content_html": "<p>As <a href=\"/archive/adventurers-codex-xmpp/\">I've said before</a>, <a href=\"https://adventurerscodex.com\">Adventurer's Codex</a> uses XMPP for it's real-time features. During development we ran into a couple of interesting challenges with integrating such a mature system with our new-ish web stack, one of which was User Authentication.</p>\n<p>The majority of Adventurer's Codex uses an OAuth Provider model for user authentication but Ejabberd (our XMPP server) requires that the username and password be sent at connection time. Obviously we didn't want to have two different auth schemes to support, and we didn't want our client app to store any passwords (hence OAuth). We spent a while hunting for different possible solutions, and in the end we stumbled into a really simple one.</p>\n<p>Ejabberd allows for authentication to be handled by an external script, which allows us to use our core database as the auth backend. We could, in principle, use a Django management command to make a call to our database, hash the password that we were given by the client and compare it to the one stored in our database, but not only is that a lot of work and error prone, it's too coupled to our database layer, and it still required the client to store the user's password.</p>\n<p>In the end we went with what might seem like the obvious solution: just keep using OAuth. After the client receives the initial user data at load time, it sends the same OAuth token as the password along with the user's XMPP JID to Ejabberd. Ejabberd then calls out to an external script which makes an HTTP request to our API to see if the user exists and that the token is valid. Clean and simple.</p>\n<p><img alt=\"A visualization of the OAuth over XMPP process.\" src=\"/images/blog/xmpp-auth.svg\" /></p>\n<p>There's a few major advantages to using this method. First, The client no longer has to store user passwords, which not only makes our implementation simpler, but also protects our users from a whole host of attacks. Second, the user's XMPP session is now bound to the same limits as the rest of their access to the site which greatly simplifies permissions handling. Third, and perhaps the most interesting is that Ejabberd is no longer tied to either the Django CLI or the database and can be spun off as essentially a separate microservice on another machine.</p>\n<p><a href=\"https://gist.github.com/Sonictherocketman/aefd78575280978af0562a0b9841a903\">Check out the Ejabberd Auth Script &#8594;</a></p>", "date_published": "2017-10-24T18:24:00", "title": "OAuth Over XMPP", "id": "http://brianschrader.com/archive/oauth-over-xmpp/"}, {"author": {"name": "Brian Schrader"}, "url": "http://brianschrader.com/archive/todolist-update/", "tags": ["development", "bash"], "content_html": "<p>Over the last week, I've made some changes to <a href=\"//gist.github.com/Sonictherocketman/77dd6cd8fd907dbbc00031acb08f3ba0\">my todolist script</a>: I've cleaned up the printing a bit and removed the temp file.</p>\n<p><img alt=\"todolist terminal output\" src=\"/images/blog/todolist-update.png\" /></p>\n<p>I had to remove the temp file because it was actually causing performance problems with BBEdit. Since the temp file came into and out of existence every few seconds, BBEdit's project view would dutifully redraw the project file list twice in quick succession, wasting quite a bit of CPU power<sup>1</sup>, and sometimes causing my MacBook's fan to spin up. Now that the temp file is gone, that problem is too.</p>\n<div class=\"footnote\">\n<sup>1. </sup>I'm not sure why BBEdit needs so much power to redraw the project list and I've reached out to their support. Hopefully they can resolve the issue. At the very least my script is a little more well behaved so it's no longer an issue.\n</div>\n\n<p><a href=\"//gist.github.com/Sonictherocketman/77dd6cd8fd907dbbc00031acb08f3ba0\">todolist &#8594;</a></p>", "date_published": "2017-10-10T15:35:00", "title": "todolist update", "id": "http://brianschrader.com/archive/todolist-update/"}, {"author": {"name": "Brian Schrader"}, "url": "http://brianschrader.com/archive/mini-rant-about-documentation/", "tags": ["development", "programming"], "content_html": "<p>I want to talk about documentation. iOS<sup>1</sup>, Nginx, Python, DRF, Django, Celery, and Postgres have excellent documentation, but documentation only helps when your question is \"How does this thing work and what does it do?\" Documentation, at least code level docs, are useless when it comes to figuring out what you need in the first place. Celery can tell you how to use Celery, but it isn't as great at telling you why you might need it. I've become convinced that user guides are as, if not more, important than code level documentation, and we as a community need more of them.</p>\n<div class=\"footnote\">\n1. For their credit, iOS and really all of Apple's developer resources have excellent user guides that explain not only how to use a thing, but why and where you might need it (thinking about it, this could be because iOS and macOS have been around long enough to develop these kinds of docs).\n</div>", "date_published": "2017-10-09T15:31:00", "title": "Mini-Rant About Documentation", "id": "http://brianschrader.com/archive/mini-rant-about-documentation/"}, {"author": {"name": "Brian Schrader"}, "url": "http://brianschrader.com/archive/todolist/", "tags": ["code", "bash", "tools", "programming"], "content_html": "<p>I've <a href=\"/archive/todos-as-a-templating-system/\">talked before</a> about how I use <code>TODO</code> comments in my code to lay out what I want to do before actually doing it. To help me keep track of all of these TODOs in my code I wrote a <a href=\"https://gist.github.com/Sonictherocketman/77dd6cd8fd907dbbc00031acb08f3ba0\">little script yesterday</a> and I've put it on Github for anyone who's interested.</p>\n<p>The script looks through all of the code (by default Python code) in a given destination directory, greps for the <code>TODO</code> comments, and prints them nicely in a constantly updated list in the terminal. The output looks like this:</p>\n<p><img alt=\"Todolist Terminal Window\" src=\"/images/blog/todolist-terminal.png\" /></p>\n<p>Writing this script I learned a couple of new things about terminal commands like how to clear the screen without deleting the scrollback or just printing newlines (i.e. what <code>clear</code> does). I've put the script in my <code>/usr/local/bin</code> and called it <code>todolist</code> so now I can invoke it from anywhere and get a nice little list of what I've put off working on.</p>\n<p><a href=\"https://gist.github.com/Sonictherocketman/77dd6cd8fd907dbbc00031acb08f3ba0\">todolist on Github &#8594;</a></p>", "date_published": "2017-09-28T14:28:00", "title": "todolist", "id": "http://brianschrader.com/archive/todolist/"}, {"author": {"name": "Brian Schrader"}, "url": "http://brianschrader.com/archive/accidental-devops/", "tags": ["devops", "development"], "content_html": "<p>Since I became a developer, I've always worked on small (3-5) or single-person teams. Even at my current job, I'm the the lead and only full-time developer. In more recent projects (including <a href=\"https://adventurerscodex.com\">Adventurer's Codex</a>) this means that I'm the DevOps guy and System Admin as well. I'm by no means an expert in either, but I can do both.</p>\n<p>I started learning how to manage and administer servers when I started this site back in 2012. Back then I never thought that all of those hours spent configuring Apache and PHP would lead to anything, but those countless hours of frustration taught me the basics. Fast-forward 5 years and I'm developing three major projects (two unannounced) and I'm DevOps and SysAdmin for all three. It's crazy to think about.</p>\n<p>I'd highly recommend any new developers to follow the same general path I did: start a project or blog and learn to deploy it yourself. I started with a cheap old-style webhost and FTP, and slowly moved to managing the whole stack on Linode. I'm using Docker on new projects, and for now, I'm scripting my own deploys (though this could change soon if I migrate one project to Ansible).</p>\n<p>As developers it's sometimes easy to forget that we write software that actually runs on some actual hardware in some actual datacenter somewhere. Knowing how to do many of the things that DevOps and SysAdmins do will not only make you a better developer, it gives you the ability to do more on your own. You often don't need tons of layers of software to deploy yours if you know how to do it from the ground up (especially if it's a smaller project). Those tools make it easier sure, but they're not required.</p>", "date_published": "2017-09-26T12:30:00", "title": "Accidental DevOps", "id": "http://brianschrader.com/archive/accidental-devops/"}, {"author": {"name": "Brian Schrader"}, "url": "http://brianschrader.com/archive/getting-back-on-the-horse/", "tags": ["update", "blogging"], "content_html": "<p>It's been a while since my last post. This whole summer has been an unusually quiet here, and while a number of personal issues have cropped up this summer that derailed me from blogging, I've really just gotten out of the habit of writing regularly. This is me forcing myself back onto that horse. I've got some exciting news coming, and between work and Adventurer's Codex, I've been keeping myself way too busy.</p>\n<p>On the <a href=\"https://adventurerscodex.com\">Adventurer's Codex</a> front: we're in the middle of a large refactor caused by our ongoing migration to Webpack which should hopefully fix a bug caused by our fairly primitive current build and deploy system. We're starting to see the light at the end of the tunnel now, and hopefully it shouldn't take much longer before we're back to writing new, cool features. The original build and deploy system was basically a lot of manual work and a shell script. When we wrote it, I had no idea what Webpack was or how to deploy a modern front-end app, now I do. That's what happens when you learn on the go; sometimes you have to step back and fix your past mistakes.</p>\n<p>In my dwindling spare time, I've been working on another project that I hope to announce soon, so look for more to come there.</p>", "date_published": "2017-09-25T16:20:00", "title": "Getting Back on the Horse", "id": "http://brianschrader.com/archive/getting-back-on-the-horse/"}, {"author": {"name": "Brian Schrader"}, "url": "http://brianschrader.com/archive/todos-as-a-templating-system/", "tags": ["software development", "programming", "thought technology"], "content_html": "<p>When I sit down to start a new feature or project the blank page or empty function can be extremely intimidating; a void of infinite complexity. I'm sure lots of developers do this, and maybe most don't realize it, but I've found that <code>TODO</code> comments are super useful in helping to abstract away nitpicky details and focus on the overall purpose of the code as I'm writing it. Let's say that we want to validate some parameters from an HTTP request and kick off a background task to send an email to a list of requested users. First off, we need to handle the request and kick off the task, but there's a bunch of validation and database queries we need to make before we can do that, and we haven't even written the task function yet, that's where <code>TODOs</code> come in.</p>\n<pre><code>class MassEmailView(APIView)\n    # TODO: check if user has permission to send mass mail\n    def post(self, request):\n        # TODO: Get users from the request\n        users = []\n        for user in users:\n            # TODO: send the message\n            pass\n        return Response(None, status=200)\n</code></pre>\n<p>Right off the bat I know that I need to get a list of users and do something with each of them. In a lot of ways I'm basically writing pseudo-code and slowly filling in the blanks with real code. Next, let's say we write the background task.</p>\n<pre><code># ---- tasks.py ----\n@shared_task\ndef send_email(user, subject, message_text):\n    email.send(user.email, subject, text=message_text)\n\n# ---- views.py ----\nclass MassEmailView(APIView)\n    # TODO: check if user has permission to mass send mail\n    def post(self, request):\n        # TODO: Get users, subject, and text from the request\n        users = []\n        subject = ''\n        text = ''\n        for user in users:\n            tasks.send_email.delay(user, subject, text)\n        return Response(None, status=200)\n</code></pre>\n<p>Slowly the code is coming together. I've written the background task and updated my view. The basic structure is there, but I haven't done the work of parsing the request or any error handling, so let's move on to that.</p>\n<pre><code># ---- tasks.py ----\n@shared_task\ndef send_email(user, subject, message_text):\n    email.send(user.email, subject, text=message_text)\n\n# ---- views.py ----\nclass MassEmailView(APIView)\n    @authentication_classes((SessionAuthetication,))\n    @permission_classes((IsAdmin,))\n    def post(self, request):\n        try:\n            users = [\n                User.objects.get(username=username)\n                for username in request.POST['users'].split(',')\n            ]\n        except ObjectDoesNotExist:\n            return Response(INVALID_USER_RESPONSE, status=400)\n\n        subject = request.POST['message_text']\n        text = request.POST['message_text']\n        for user in users:\n            tasks.send_email.delay(user, subject, text)\n        return Response(None, status=200)\n</code></pre>\n<p>Now that we're done, it's clear that the <code>TODO</code> comments were hiding quite a bit of complexity, but the overall structure is the same. Just because our code is read by the computer from top to bottom doesn't mean we have to write it that way. Sometimes it helps to start with a rough outline of the whole picture, and slowly color it in bit by bit.</p>\n<p><link rel=\"stylesheet\" href=\"https://yandex.st/highlightjs/8.0/styles/default.min.css\">\n<script src=\"https://yandex.st/highlightjs/8.0/highlight.min.js\"></script>\n<script>hljs.initHighlightingOnLoad();</script></p>", "date_published": "2017-07-31T15:24:00", "title": "TODOs as a Templating System", "id": "http://brianschrader.com/archive/todos-as-a-templating-system/"}, {"author": {"name": "Brian Schrader"}, "url": "http://brianschrader.com/archive/climate-change-and-guns-germs-and-steel/", "tags": ["guns germs and steel", "history"], "content_html": "<p>I've been slowly working my way through <a href=\"https://en.wikipedia.org/wiki/Guns,_Germs,_and_Steel\">Guns, Germs, and Steel</a> for a while now. It's an interesting read overall, but this one section really got me thinking.</p>\n<blockquote>\n<p>What were the factors that tipped the competetive advantage away from [hunting-gathering] and towards [farming]? ...five main contributing factors can still be identified; the controversies revolve mainly around their relative importance.</p>\n<p>One factor is the decline in the availability of wild foods. The lifestyle of hunter-gatherers has become increasingly less rewarding over the past 13,000 years, as resources on which they depended have become less abundant of even disappeared... most large mammal species became extinct in North and South  America at the end of the Pleistocene, and some became extinct in Eurasia and Africa, either because of climate changes or because of the rise on skill and numbers of human hunters.</p>\n</blockquote>\n<p>I've never heard this part of the argument before: that humans may have turned to farming because of the lack of large, huntable animals after the last ice age. It's fascinating to consider that the recent set of the Earth's cycles of natural climate change have not only been more favorable for humans to develop farming and complex civilization, but that they may have also forced our hands in the first place.<sup>1</sup></p>\n<div class=\"footnote\">\n<sup>1.</sup> And that man-made climate change could be the end of that same civilization.\n</div>", "date_published": "2017-07-15T13:42:00", "title": "Climate Change and Guns, Germs, and Steel", "id": "http://brianschrader.com/archive/climate-change-and-guns-germs-and-steel/"}, {"author": {"name": "Brian Schrader"}, "url": "http://brianschrader.com/archive/adventurers-codex-xmpp/", "tags": ["adventurerscodex", "dnd", "software", "xmpp"], "content_html": "<p>You might have noticed in my <a href=\"/archive/adventurers-codex-the-stack/\">last post in this series</a> that I mentioned Adventurer's Codex using <a href=\"http://ejabberd.im\">Ejabberd</a>. A few of you might even be a little abhorred by the idea that a modern piece of software has even a line of XML running through it, but it's true.</p>\n<h2>But it's XML!</h2>\n<p>XMPP is an old standard these days, and I think it's safe to say that it's earned a reputation for being a very complex and stateful XML-based protocol. But XMPP has also had years of industry giants testing its limits and adding new and improved functionality to the spec. All of that means that the XMPP spec has tons of recommendations and countless extensions which can make it difficult to approach as a newbie, but it also means that nearly anything you need to do with XMPP has already been done.</p>\n<p>In building <a href=\"https://adventurerscodex.com\">Adventurer's Codex</a> we wanted to leverage as many server technologies as possible with as little custom logic as we could manage. Nobody on the team wanted to write chat or pubsub functionality, or handle scaling the system with multiple nodes, and we wanted the system to be built on open technologies that support the idea of a standards based Open Web and all of the inter-compatibility that such a web entails. We looked around, and here was this perfectly good, time-tested standard just lying there, waiting for us.</p>\n<p><a href=\"http://ejabberd.im\">Ejabberd</a> has lots of great resources and chat rooms out there filled with people that can help you and the majority of commonly used specs like <a href=\"https://xmpp.org/extensions/xep-0045.html\">Multi-User Chat</a> and <a href=\"https://xmpp.org/extensions/xep-0060.html\">PubSub</a> are very well documented. The server software is robust and adaptable, and the defaults are already pretty good at getting you up and running. Perhaps most importantly, the client-side support for XMPP is really good: The web has <a href=\"http://strophe.im\">Strophe.js</a> and all of the native platforms have either built in support or a wealth of Open Source options for speaking XMPP, so expanding support is easy. All of these things came together to make XMPP a worthwhile choice for our needs... even if it's XML.</p>", "date_published": "2017-07-11T13:12:00", "title": "Adventurer's Codex: XMPP", "id": "http://brianschrader.com/archive/adventurers-codex-xmpp/"}], "author": {"url": "https://brianschrader.com", "name": "Brian Schrader", "avatar": "http://www.gravatar.com/avatar/11b074a636e00292c98e3e60f7e16595"}, "icon": "http://www.gravatar.com/avatar/11b074a636e00292c98e3e60f7e16595"}