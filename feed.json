{"version": "https://jsonfeed.org/version/1", "title": "BiteofanApple", "home_page_url": "https://brianschrader.com", "feed_url": "https://brianschrader.com/feed.json", "description": "Thoughts, and ramblings about technology, programming, history,\n and whatever else I'm interested in.", "icon": "https://www.gravatar.com/avatar/11b074a636e00292c98e3e60f7e16595", "author": {"name": "Brian Schrader", "url": "https://brianschrader.com", "avatar": "https://www.gravatar.com/avatar/11b074a636e00292c98e3e60f7e16595"}, "items": [{"id": "http://brianschrader.com/archive/generating-deterministic-procedural-artwork-with-pdraw/", "url": "http://brianschrader.com/archive/generating-deterministic-procedural-artwork-with-pdraw/", "title": "Generating Deterministic, Procedural Artwork with pdraw", "date_published": "2022-02-18T22:36:00", "tags": ["programming", "python", "software", "tools"], "author": {"name": "Brian Schrader"}, "content_html": "<p>I've been messing with procedural artwork lately, and I've decided to discuss the fruits of my labor. Behold <a href=\"https://github.com/Sonictherocketman/pdraw\">pdraw</a>: a script that generates cool line art from arbitrary text!</p>\n<p><a href=\"https://github.com/Sonictherocketman/pdraw\"><img class=\"image-right\" src=\"/images/blog/pdraw.gif\" alt=\"Pdraw.py\" style=\"max-width: 300px;\" /></a></p>\n<p>About two weeks ago, <a href=\"https://www.youtube.com/watch?v=tkC1HHuuk7c\">Numberphile</a> released a new video about visualizing the digits of Pi using procedural artwork. I was taken by the idea and decided that I would, for fun, simply replicate their technique in Python and use it to plot random sections of Pi. It was a sort of goof-off project to occupy an evening. At the end of that evening, I had finished my script (through several iterations) and plotted various sections of Pi. I could now plot any stream of numbers. Then it hit me: all digital data can be represented as a base 10 string of numbers. I could draw anything.</p>\n<p>The next evening, I set about making it so that my script could accept various command-line configurations and convert any text into its base 10 equivalent (with a small tweak for artistic reasons). Once I had that, it was time to start plotting anything I could think of. I've tried drawing binaries, zip files, websites, and a lot more.</p>\n<p>I've <a href=\"https://github.com/Sonictherocketman/pdraw\">open sourced</a> the code for pdraw &mdash; which uses no dependences because Python is cool like that &mdash; so you the technically inclined reader can draw your very own text streams and see if they produce anything interesting.</p>\n<p>I've found that the cooler drawings tend to arise from text containing between 250-2000 characters, although larger files can be cool too. What's especially interesting is that you can almost see the structure of the data in the drawing as you watch it draw. For example, my blog archive page is basically a blob of header information, then a long and repetitive HTML table, and then another blob. This structure appears in the drawing when you plot the HTML of the page; the table rows appearing as little loops followed by lines in random directions.</p>\n<p><code>$ curl https://brianschrader.com/archive/ | ./pdraw -e</code></p>\n<p>Check it out, and let me know what you do with it. I'd love to know if anyone finds more cool things to do with pdraw, or if you generate some particularly cool drawings with it.</p>"}, {"id": "http://brianschrader.com/archive/i-solved-the-same-bug-twice-and-didnt-know-it/", "url": "http://brianschrader.com/archive/i-solved-the-same-bug-twice-and-didnt-know-it/", "title": "I Solved The Same Bug Twice And Didn't Know It", "date_published": "2022-02-01T23:44:00", "tags": ["software development", "programming"], "author": {"name": "Brian Schrader"}, "content_html": "<p>Human memory is incredibly lossy; the brain an imperfect storage medium.</p>\n<p>I've <a href=\"/archive/comments-with-cited-references/\">written before</a> about how I include links in my code comments to resources that helped me find unintuitive or convoluted solutions. These links are essentially the footnotes of my systems; both documentation and a debugging paper-trail for poor, future souls to follow.</p>\n<p>However, I am an imperfect soul, and so not all of my hackish solutions are cited. This fact bit me the other day when I discovered a strange bug with a new feature in <a href=\"https://adventurerscodex.com/\">Adventurer's Codex</a>.</p>\n<h3>The Technical Details</h3>\n<p>The actual issue was fairly nuanced and understanding it depends heavily on the details of our infrastructure, but the simple version goes like this:</p>\n<p>We have two endpoints, one that returns a resource and one that returns the schema for our entire API. For whatever reason, in this particular case, requesting the resource changed the output of the schema the first time the resource was requested. This is obviously unexpected. The structure of an API shouldn't change when you call it right? Well, that's the thing. Technically the API wasn't actually changing, but the schema was ever so slightly different: the format of the schema for that resource had changed.</p>\n<p><img\n    alt=\"A funny joke\"\n    src=\"/images/blog/changed-outcome.jpg\"\n    class=\"image-right\"\n    style=\"max-width:320px;\"\n/></p>\n<p>The schema is a hierarchical description of all of our API endpoints, with paths to describe how each resource is related. In this case, the schema would output two different paths to the same resource, but the data at both paths were identical.</p>\n<p>For technical reasons, these paths matter to us. <strong>They must remain the same.</strong></p>\n<h3>Following the Breadcrumb Trail</h3>\n<p>After some DuckDuckGo-fu failed to turn up any useful results, I turned to the rest of the codebase. The problematic endpoint was very simple. Surely we'd implemented other similar functionality which didn't cause this behavior. Sure enough I found two such cases. Both of which contained the same strange, seemingly useless line of code.</p>\n<p>Once I had added that seemingly useless code, the schema no longer changed. I had fixed the bug! I had discovered <em>how</em> to fix the bug, but not <em>why</em>. I could have stopped there. Someone else might have, but I needed to go further. I needed to find out how this unrelated line solved my problem.</p>\n<p>For now, I had found a clue.</p>\n<p>Being the primary author of this particular codebase I knew that such a strange implementation would probably have at least a code comment or a comment in the implementing commit that explained the weirdness. There was no code comment unfortunately, and neither was there one in the commit. However, by diving through the history of that particular file I found that there had been a code comment, right where I would have expected it to be, when the code was written; but it had been removed in another commit a few months back&mdash;<em>by me</em>.</p>\n<p><img\n    alt=\"The Fatefult Commit\"\n    src=\"/images/blog/ac-fateful-comment.png\"\n    class=\"image-center\"\n/></p>\n<p>Unfortunately, the comment didn't link to an answer on the internet and subsequent searches have turned up nothing of use.</p>\n<p>For now, I had found another clue&mdash;and a big one at that. I had also discovered something scarier: I had already found, fought, and beaten this bug before, and it was I that deleted the vital clue.</p>\n<p>I had discovered that I was not just the detective but the victim and the murderer, and that the case had been closed three years prior.</p>\n<h3>Answers Lost to the Mists of Time</h3>\n<p>As strange as it may seem, I find that this kind of thing happens more often than we may like to admit. I am in a situation where I maintain most of the code I write, and so I get to live with my mistakes for years&mdash;going on a decade now. When I wrote the offending code and the comment that explained it, I was deep in the bowels of <a href=\"https://www.django-rest-framework.org\">DRF</a> building out the Adventurer's Codex backend from whole cloth. Since then I've moved on to building other things. That code has now sat for years untouched, working as designed; and <a href=\"https://www.goodreads.com/quotes/376870-and-some-things-that-should-not-have-been-forgotten-were\">some things which should not have been forgotten were lost</a>.</p>\n<p>At time of writing this mystery is still unsolved; the clues leading to an end I cannot see. However I now know that at one point in the past I did know the cause of this issue and how to solve it. The solution lives on, but <a href=\"/archive/where-it-comes-from-nobody-knows/\">the cause is lost</a>: a coder's <a href=\"https://en.wikipedia.org/wiki/Greek_fire\">greek fire</a>.</p>\n<p>The answer may be lost to time, as even three years is enough time for some links to rot and trails to run cold. In what now feels like another lifetime, a past version of myself held the answers I now seek. Perhaps one day a Future Me will know what Past Me had found.</p>"}, {"id": "http://brianschrader.com/archive/take-a-break-script-something/", "url": "http://brianschrader.com/archive/take-a-break-script-something/", "title": "Take a Break, Script Something", "date_published": "2022-01-03T04:58:00", "tags": ["software development", "programming"], "author": {"name": "Brian Schrader"}, "content_html": "<p>Lately I've been putting in a fair amount of work improving Adventurer's Codex, and we have some very exciting updates coming soon (no spoilers 🤫). A lot of the changes required modifying our existing single-page app or API backend, but one involved the creation of a totally new repository and a new set of public-facing pages. It's those pages that I want to talk about.</p>\n<p>The problem was fairly simple: given a set of data that changes very infrequently, create a set of web pages that display the details of each record in the dataset. Simple right?</p>\n<p>Now, there's two ways I could have built out this functionality:</p>\n<ol>\n<li>Dynamic pages that serve the content using templates served by Django</li>\n<li>Static pages built once and served by Nginx</li>\n</ol>\n<details>\n  <summary>Additional Context</summary>\n  <p>I wanted this functionality to be separate from our main project, so the first solution would involve setting up a new Django app and database as well as building a system to import the data from JSON files.</p>\n</details>\n\n<p>I elected to do the second solution because of it's simplicity and because the data changes so rarely. When all was said and done, I had three scripts &mdash; two bash scripts, and one Python script &mdash; and a set of <a href=\"https://jinja.palletsprojects.com/en/3.0.x/\">Jinja templates</a>. Running the main build script would download the dataset if it didn't already exist, parse the data, and build the pages. The whole process takes about 10 seconds to download and generate over 1200 pages. After it was done, I even set up a Docker container to build and serve the pages with Nginx. In total the project is 295 lines of code (1k if you include the HTML templates), and basically never needs to be updated again; if the data does ever change, we could simply re-run the script or rebuild the contaner.</p>\n<h2>Scripting is a Much-Needed Break</h2>\n<p>This is one thing I love about scripting as opposed to application development. In app development, you construct a codebase and then you need to live with it long term, adding new functionality and deprecating old functionality. Scripts, on the other hand, are low risk, high reward: you write them once to solve a specific problem and then rarely touch them again. I use a lot of simple scripts on a daily basis, some of which I wrote nearly a decade ago and haven't touched since.</p>\n<p>Scripts are programming candy whereas app development is the real meat and potatoes. In a script you can take shortcuts, be a bit messy, and forgo worrying about the complexities of large software. Once the script works, there's not much else to do: just ship it.</p>\n<p>Whenever I get the chance to take a break from developing large apps and just do some quick scripting, I leap at the opportunity.</p>"}, {"id": "http://brianschrader.com/archive/the-road-to-glass--stone/", "url": "http://brianschrader.com/archive/the-road-to-glass--stone/", "title": "The Road to Glass & Stone", "date_published": "2021-12-07T21:11:00", "tags": ["music"], "author": {"name": "Brian Schrader"}, "content_html": "<p>I don't think I've ever talked about this here before, but I play in a band. And that band, <a href=\"https://thefourthsection.com\">The Fourth Section</a>, just released its first EP, 'Glass &amp; Stone'; and it's available now.</p>\n<p>It's been almost two years since we formed, just before lockdown in March of 2020, so technically this is our pandemic EP. I'm super happy that we've finally gotten a release out there and available for everyone.</p>\n<p><a href=\"https://thefourthsection.com\"><img\n    src=\"/images/blog/glass_and_stone.png\"\n    alt=\"Glass & Stone\"\n    class=\"image-center\"\n/></a></p>\n<p>I've released music on Bandcamp before, but this is the first time that I'd ever gone through the process of getting music onto the big platforms. It's both a time-consuming process, and still incredible that a bunch of indie artists, with no label backing, can simply fill out some paperwork and then distribute music world wide. We often lose sight of it, but the internet is really magical sometimes.</p>\n<p>The EP was recorded, mixed, and mastered at <a href=\"https://www.cachoestudio.com\">Cacho Studio</a> in Tijuana, and they did a great job. My thanks to everyone at the studio for their hard work.</p>\n<h2>A Virtual and Untrodden Road</h2>\n<p>Since we formed right before the pandemic lockdowns hit the U.S., we couldn't practice at a studio in-person at first. For nearly a year we rehearsed virtually or acoustically&mdash;as well as masked and social distanced&mdash;at a local park. The three of us used <a href=\"https://jamkazam.com\">Jamkazam</a> for our virtual practices and it works well enough for that purpose, but it's no substitute for actual, plugged-in rehearsal at a practice studio.</p>\n<p>We're back to in-person rehearsal now, and it feels great. Lots of new stuff is in the works and hopefully there will be more to show in the coming months.</p>\n<p>Having gone through the process of writing, composing, and distributing music once, we now have a pretty good idea of what it takes to make an EP (or an album) happen, and we're really stoked to do this whole process again (and soon). As with most things, the first try is usually the hardest. There's always the initial, one-time setup that has to be done, and there's just so much you don't know the first time. That is all past now. We know what it takes, and the setup is done. Releasing more stuff is a lot easier now.</p>\n<p>And that is what we plan to do.</p>"}, {"id": "http://brianschrader.com/archive/nine9s-gets-an-upgrade-/", "url": "http://brianschrader.com/archive/nine9s-gets-an-upgrade-/", "title": "Nine9s gets an upgrade ⬆️", "date_published": "2021-12-06T18:28:00", "tags": ["software development", "apps"], "author": {"name": "Brian Schrader"}, "content_html": "<p>I'm super excited to announce a new suite of features for <a href=\"https://nine9s.cloud/\">Nine9s: my uptime monitoring service</a>. Now, I don't want to exaggerate too much, but I honestly thing that as of today, Nine9s is one of the most powerful uptime monitoring services out there; if you haven't already, you should try it out.</p>\n<h2>Monitor Anything</h2>\n<p>Uptime monitoring, in most cases is a pretty simple task: if you have a web service, then Nine9s makes a request to it, and verifies that it returns a successful HTTP status code. Most services stop there, or they expand on the idea and allow for checks to be more complex (e.g. verifying that elements exist on the page or that users can log in).</p>\n<p>The problem with this approach is that lots of services exist on the web, but do things other than simply serve web content. You could have a service that sends emails or that runs batch jobs. These services can't be monitored using simple HTTP requests. Even still, sometimes you don't want your services to be publicly accessable, in which case uptime monitoring services can't reach out to them at all.</p>\n<p>That's where Nine9s steps in to fill the gap! As of today, servers can now periodically ping Nine9s to report that they're still up and running. Nine9s will watch out for these reports and let the user know if the service doesn't report in within a given amount of time.</p>\n<p>Better still, Nine9s can evaluate the data sent by the server and compare it against some criteria. Imagine you have your server report its current disk usage to Nine9s. If the disk ever fills up past say 95%, then Nine9s will alert you immediately.</p>\n<p><img alt=\"Example Criteria on Nine9s\" src=\"/images/blog/nine9s-criteria.png\" /></p>\n<p>When you set up a new Measure&mdash;which is what Nine9s calls these new features&mdash;Nine9s will generate a couple of sample cron jobs you can quickly add to your servers to get started! There's even a <a href=\"https://nine9s.cloud/kb/measurement-snippets\">quickstart guide</a> to writing additional jobs!</p>\n<p><img alt=\"Sample Cron Scripts\" src=\"https://nine9s.cloud/static/kb/cron.png\" /></p>\n<p>Once you understand the power of these new Measures, you'll be able to monitor nearly anything your servers are doing and make sure they're performing as expected.</p>\n<h2>Nine9s is macOS Native!</h2>\n<p>This release also marks the launch of the <a href=\"https://nine9s.cloud/#app\">official Nine9s app for macOS!</a> It's my first ever public macOS app and I'm super excited to get it out there into the world. The app shares all of its code with the iOS and iPad versions  and is built on Catalyst, so it should feel <em>mostly</em> native.</p>\n<p>The app has all of the features you'd imagine: the ability to monitor your Endpoints and Measures, support for push notifications, and more.</p>\n<p>The app is also my first ever native app released outside of the App Store!</p>\n<p>I've been working on this update for a few months now and I'm stoked to get it into the hands of all you out there! If you do end up downloading the app, let me know especially if you have feature recommendations! I'd also love to know how you all are using Measures in the wild.</p>"}, {"id": "http://brianschrader.com/archive/the-internets-original-sin/", "url": "http://brianschrader.com/archive/the-internets-original-sin/", "title": "The Internet's Original Sin", "date_published": "2021-10-26T18:07:00", "tags": ["software", "internet", "history"], "author": {"name": "Brian Schrader"}, "content_html": "<p>A piece I wrote was <a href=\"https://www.sandiegouniontribune.com/opinion/commentary/story/2021-10-25/internet-website-domain-privacy-big-data\">published in the San Diego Union Tribune</a> today. The piece is a short dive into a possible alternate history of the web and the internet as it could have been.</p>\n<p>In a bucolic way, the piece compares the development of the internet and the inevitable consequences of a few seemingly insignificant policies adopted by ISPs in the early days. The piece draws a through-line from those policies straight to the emergence of the centralized platforms we know today.</p>\n<p>In short: ISPs killed the internet and made platforms like Facebook and Amazon inevitable.</p>\n<p>The piece compares America's idealized conception of the westward expansion on the frontier to the development of the internet in the last few decades.</p>\n<blockquote>\n<p>There are no homesteads on the internet frontier. This is true on both the large and the small scales. Whether you start a website yourself, or use Facebook, you’re still effectively renting space from someone else. On the internet, <strong>we are all simply users of other people’s computers, tenants renting homes we can never own.</strong></p>\n</blockquote>\n<p><img\n    src=\"/images/blog/ut-paper-tech-article.jpg\"\n    alt=\"\"\n    class=\"image-center\"\n/></p>\n<div class=\"text-center\"><small><caption>\nThe title for the print version is much more attention grabbing.\n</caption></small></div>\n\n<p>However, the development of the internet was fundamentally different from westward expansion in two key ways. First off, there was no one already living on the internet frontier&mdash;which isn't relevant to the piece directly, but it's an important distinction. The expansion onto the internet frontier was bloodless.</p>\n<p>But secondly, ISPs made the internet a renter's frontier. Their decisions to not assign static IP addresses to homes or user accounts, and their decisions to provide non-symmetrical connections and block ports 80 and 443 made the internet fundamentally different than it was intended. On the internet today, truly owning your online presence is only possible for a very small subset of individuals and companies; the landlords of the internet.</p>\n<blockquote>\n<p>No one would accept a world in which you could never own the car you drive, or the house you live in. Some people prefer to rent or lease, but cars and houses can still actually be bought. On the internet there is no path to ownership. Each of these stumbling blocks ensures that ordinary people can never truly own a piece of the internet frontier.</p>\n<p>If computers are the land of the internet, then our personal information is the crop. Instead of being given our own small farm to start our online lives anew, we’re forced to be digital sharecroppers. In exchange for a portion of our privacy, we are allowed the chance to cultivate lands we do not own. On the internet, we are not citizens. We’re just users. Is this freedom?</p>\n</blockquote>\n<p><a href=\"1\">Check out the full piece for yourself &#8594;</a></p>"}, {"id": "http://brianschrader.com/archive/last-year-i-started-reading-a-physical-newspaper/", "url": "http://brianschrader.com/archive/last-year-i-started-reading-a-physical-newspaper/", "title": "Last Year I Started Reading a Physical Newspaper", "date_published": "2021-10-09T01:00:00", "tags": ["newspapers", "writing"], "author": {"name": "Brian Schrader"}, "content_html": "<p>I subscribe to a lot of local and national news outlets, and as most people do these days, I read the news on a screen, because well, I'm a 30 year old millennial and it's <span id=\"now-dt\">2021</span> and not 1980. But last September, out of a mix of both idle curiosity, <a href=\"https://www.dictionaryofobscuresorrows.com/post/105778238455/anemoia-n-nostalgia-for-a-time-youve-never\">anemoia</a>, and a strong urge to put an end to pandemic-induced doom-scrolling, I signed up to receive a printed copy of the Sunday paper.</p>\n<p>I've been happily reading a Sunday paper ever since.</p>\n<p><del>Every Sunday</del> Most Sundays, a paper appears before I wake up, I stumble, half asleep, out to get it, I make coffee, and then I read the news. It's a quaint experience, and it's a habit I've really come to enjoy and look forward to. The whole process takes anywhere from 30-90 minutes, then it's done, and I go about my day. On Sundays I do my absolute best not to read the news on my phone, as I do every other day. Once I've read the paper, I'm done reading the news.</p>\n<p><img\n    alt=\"Newspapers on a surface\"\n    src=\"/images/blog/sd-ut.jpg\"\n    class=\"image-center\"\n/><div class=\"text-center\"><small>A stack of papers I had lying around. Photo credit: me.</small></div></p>\n<p>Part of the reason I originally signed up for a physical paper was to force myself to read it. As I said, I subscribe to a lot of new sites, and I find a lot of articles that I want to read, but I almost never actually read them all.</p>\n<p>With so many stories to read, I found myself naturally gravitating towards the most exciting or most outrageous news. National news is almost always much more polarizing, engaging, and exciting than state and local news, but the paradox is that state and local news is often far more important and more likely to directly influence you in your day-to-day life.</p>\n<p>What's exciting, urgent, and engaging is rarely what's important. I noted this in a previous post about my policy blog, Democracy &amp; Progress.</p>\n<blockquote>\n<p>A few years back, while listening to the Ezra Klein Show, Ezra lamented that we as a society didn't spend more time focusing on local and state politics—where our time and energy is often better spent. Collectively, we don't focus on state and local politics, and yet it's only there where a lot of policy solutions can be done. That conversation stuck with me...<br />\n&ndash; <a href=\"/archive/california-democracy-and-progress/\">California, Democracy, and Progress</a></p>\n</blockquote>\n<p>I found that having a physical paper show up at my door made me more likely to read it. Simply throwing it away felt wasteful.<sup>1</sup> That slight guilt motivates me to keep to my own goals.</p>\n<p>In the last year, my knowledge of local &amp; state politics has grown immensely, and I've really enjoyed the process of learning more about my state and city. I also know a lot more about both San Diego and California and what progress is and isn't being made.</p>\n<p>Lots of people both inside and outside of the media lambast the news industry for being overly negative, and while it certainly is, national outlets are catering to a much more diverse and varied reader-base. On top of that, almost any political news story in a country as large and sufficiently polarized as the U.S. is bound to upset around 50% of readers. A political news story out of Michigan, Utah, or Texas (to pick three states at random) will likely upset Californians and vice versa. State and local news is more likely to comport with your views&mdash;assuming you somewhat agree with your community at-large.</p>\n<p>I often discuss the news with friends and I usually get asked some version of the question, \"How can you read the news so much? Isn't it just depressing?\"</p>\n<p>It can be, sure. But California has done quite a few things lately that I really like, and there's a lot of potential here for us to tackle big problems. If you're constantly focused on national news, it can feel like nothing ever gets done (because nationally nothing ever gets done), but locally that's just not true. Huge things are happening in California, and it feels good to know what they are.</p>\n<p>I've also learned a lot about things I didn't think I would be interested in. The internet has trained us to seek filter bubbles and echo chambers, and to retreat into our known interests. A newspaper, because of its physical constraints, cannot be all things to all people. There are often pages of articles about topics I wouldn't say I care about, and yet I find myself reading them. On Sundays I find myself learning about up-and-coming bands, concerts, local events, and investing tips whether I wanted to or not, and it's been a really positive experience; not universally positive, but still very positive. Echo chambers aren't great, and physical papers are a good escape from them.</p>\n<p>I'm not sure I had much of a high-minded conclusion to this retrospective, but I can say that I've enjoyed the anachronistic ritual of reading a physical paper, and I expect to continue doing so for a while.</p>\n<div class=\"footnote\">\n<sup>1.</sup> They all get recycled. Don't at me.\n</div>\n\n<script>\ndocument.getElementById('now-dt').innerHTML = (new Date()).getFullYear();\n</script>"}, {"id": "http://brianschrader.com/archive/automated-podcasts-with-automator-amp-overcast/", "url": "http://brianschrader.com/archive/automated-podcasts-with-automator-amp-overcast/", "title": "Automated Podcasts with Automator &amp; Overcast", "date_published": "2021-08-24T20:59:00", "tags": ["blogging", "programming"], "author": {"name": "Brian Schrader"}, "content_html": "<p>I've <a href=\"/archive/siri-is-a-blogging-tool/\">mentioned before</a> that I use Siri as an editing tool. I write a piece, lightly edit it, and then have Siri read it back to me. This helps me catch unintended grammatical errors and clumsy sentences. Building on that principle, <a href=\"https://pine.blog\">Pine.blog</a> and <a href=\"https://hewellapp.com\">Hewell</a> both ship with a feature that use iOS's <code>AVSpeechSynthesizer</code> API to read articles or location information aloud.</p>\n<p>That said, I often find articles that I want to read, but after a long day staring at a computer screen, I don't want to actually <em>read</em> them. Lots of sites these days provide spoken audio for their articles&mdash;which is great&mdash;but the vast majority don't.</p>\n<p>That's where Automator comes in.</p>\n<p><img\n    alt=\"Save Spoken Text to File\"\n    src=\"/images/blog/automator-spoken-text.png\"\n    style=\"width:500px; height:381.5px;\"\n    class=\"image-center\"\n/></p>\n<p>This Automator service simply runs a bash script that takes the contents of the selected text as input, feeds it to the built-in macOS <code>say</code> command, and outputs it to a file on the Desktop named using the contents in my clipboard.</p>\n<details>\n  <summary>Check out the full script</summary>\n<pre><code>cd ~/Desktop;\n# A hack to get stdin into say through Automator. For some\n# reason simply saying -f didn't work for me.\nwhile read line; do echo \"$line\" done < \"${1:-/dev/stdin}\" |\n    say -o .spoken_text -f -\n\nTITLE=\"$(pbpaste -Prefer txt)\"\nif [ -z \"$TITLE\" ]; then\n    TITLE=\"Spoken Text\"\nfi\n# Sanitize the article title. Writers love colons which macOS hates\nTITLE=\"$(echo \"$TITLE\" | sed -e 's/[^A-Za-z0-9._-]/_/g')\"\n\n# Conver the audio and be quiet about it\n/usr/local/bin/ffmpeg -i .spoken_text.aiff -loglevel -8 -y \"$TITLE.aac\"\nrm .spoken_text.aiff</code></pre>\n</details>\n\n<p>The script also uses FFmpeg to convert the audio to an AAC file so that I can then upload it to <a href=\"https://overcast.fm\">Overcast</a>, my preferred podcast player.</p>\n<p>By default, macOS will include Automater services in the right-click menu, but I've also bound the script to <code>Cmd+Ctl+Shift+S</code> (which is similar to my existing <code>Cmd+Ctl+S</code> shortcut for reading the selected text aloud).</p>\n<p><img\n    alt=\"The macOS Services Menu\"\n    src=\"/images/blog/services-menu-speak.png\"\n    style=\"width:321px; height:230px\"\n    class=\"image-center\"\n/></p>\n<p>Now, I can discover new articles to read, perform a quick set of keystrokes, upload the audio to Overcast, and then go for a walk while I catch up on the day's interesting news!<sup>1</sup></p>\n<p>I've provided the Automator service as a zip archive below if anyone wants to play with it.</p>\n<p><a href=\"/dropzone/Save Spoken Text to File.zip\">⬇️ Save Spoken Text to File.workflow</a></p>\n<hr />\n<div class=\"footnote\">\n    <p><sup>1.</sup>&nbsp;There are a few quirks to this workflow still. Websites are filled with non-article content, so to avoid selecting those, I typically following the following steps:\n    </p>\n    <ol>\n        <li>Turn on reader mode (<code>Cmd+Shift+R</code>)</li>\n        <li>Copy the title of the article to the clipboard (<code>Cmd+C</code>)</li>\n        <li>Select the article text (<code>Cmd+A</code>)</li>\n        <li>Run my Automator service (<code>Cmd+Ctl+Shift+S</code>)</li>\n        <li>Upload the new AAC file to Overcast</li>\n    </ol>\n    <p>I admit, it's a little cumbersome, but it does work really well.</p>\n</div>"}, {"id": "http://brianschrader.com/archive/retrospective-on-a-year-spent-writing/", "url": "http://brianschrader.com/archive/retrospective-on-a-year-spent-writing/", "title": "Retrospective on a Year Spent Writing", "date_published": "2021-08-23T23:28:00", "tags": ["writing", "meta", "blogging"], "author": {"name": "Brian Schrader"}, "content_html": "<p>Around this time last year, I started writing a lot. Since then, I've published <a href=\"https://goingindie.tech\">a book</a>, started a <a href=\"https://democracyandprogress.com\">policy blog</a>, and started writing for a <a href=\"https://sduptownnews.com/californians-deserve-better-data-protection/\">local paper</a>. All in all, I think it's safe to say that I've written about as many words in the past 12-15 months as over the preceding 10 years.</p>\n<p>A crude calculation of the word-count of this blog shows that I've written approximately 93,719 words. That's a lot, but considering that <a href=\"https://goingindie.tech\">Going Indie</a> is over 62,000 words and my published articles total almost 7,000, that 93,000 looks a lot less impressive.</p>\n<pre><code>$ find archive/ -name \"*.md\" | xargs -I {} cat {} | wc -w\n   93719\n</code></pre>\n<p>I've learned a lot about myself and my writing in the past year. I've learned how to pitch articles, how to build up the courage to submit them, and how to research and write about complex topics. I've also gotten better at defining my <a href=\"https://redalemeden.com/microblog/post-1570576215962\">assumed audience</a>.</p>\n<p>I'd always intended for this blog to be a place for me to write about whatever I wanted, and while I have written about a number of topics here, over time I've gravitated towards discussions of software, the tech industry, and personal matters. Last year, during the depths of the pandemic, I wanted to expand and write about public policy, but this blog never felt like the right place to do that. Hence why I started <a href=\"https://democracyandprogress.com\">Democracy &amp; Progress</a>, and why I continue to write for the local paper.</p>\n<p>Writing for both D&amp;P and the paper has helped me focus my energy on working to better inform people and convince them to take an interest in a given subject. It's also helped me better understand the in-depth nuances of topics I previously thought I knew something about. Nowadays, I write not only as a way to inform and convince others, but as an exercise to educate myself. They say you don't fully understand something until you try to teach it, and that truism has held strong for me this past year.</p>\n<p>Writing this much has also been a catalyst that pushes me to <a href=\"/archive/novels-and-insurmountable-tasks/\">write even more</a>.</p>\n<p>I've really enjoyed this deeper commitment to writing, and while it remains just a hobby, it's an incredibly fulfilling and enjoying one that I hope to continue as long as I can.</p>"}, {"id": "http://brianschrader.com/archive/grove/", "url": "http://brianschrader.com/archive/grove/", "title": "Grove, a new Tree-planting Wellness Game 🎉", "date_published": "2021-07-12T02:07:00", "tags": ["announcement", "software", "apps", "climate change", "gaming", "indie", "ios"], "author": {"name": "Brian Schrader"}, "content_html": "<p>Today marks the release of my newest app: Grove! Here's a brief description of the app from the <a href=\"https://thegroveapp.com?ref=bs\">product page</a>:</p>\n<p><a href=\"https://thegroveapp.com?ref=bs\"><img src=\"https://thegroveapp.com/img/icon.png\" alt=\"Grove Logo\" style=\"max-width:150px; width:80%; box-shadow:3px 3px 5px darkgrey; border-radius:30px; padding:0; margin:15px; float:right;\"></a></p>\n<blockquote>\n<p>Grove is an augmented-reality game where you plant virtual trees in the real world! Collect the various kinds of trees, learn about them, and earn achievements all while getting outdoors and enjoying your virtual garden.</p>\n<p>Grove is part game, part educational app, and part wellness app! In Grove you care for your trees and tend to your garden, and in turn, you stay fit and healthy.</p>\n<p>&mdash; <a href=\"https://thegroveapp.com?ref=bs\">Grove Product Page</a></p>\n</blockquote>\n<p>If you're at all interested in the app, please do give it a try, and let me know what you think. I can't wait to hear your feedback (and see some of your trees)!</p>\n<p><a href=\"https://thegroveapp.com?ref=bs\"><div style=\"text-align:center;\">\n    <img src=\"https://thegroveapp.com/img/v1.0/grove-full.png\"\n        alt=\"The grove view\"\n        width=\"400px\"\n        style=\"width:200px; display:inline-block;\"\n    />\n    <img src=\"https://thegroveapp.com/img/v1.0/plant.png\"\n        alt=\"A detail view\"\n        class=\"hide-on-mobile\"\n        width=\"400px\"\n        style=\"width:200px; display:inline-block;\"\n    />\n    <img src=\"https://thegroveapp.com/img/v1.0/market.png\"\n        alt=\"A detail view\"\n        class=\"hide-on-mobile\"\n        width=\"400px\"\n        style=\"width:200px; display:inline-block;\"\n    />\n</div></a></p>\n<h2>What is Grove?</h2>\n<p>At its core, Grove is part game, part AR-wellness app with some educational bits sprinkled in. The player plants virtual trees in real-life locations and builds out their virtual grove. Each tree is unique and randomly generated. Trees can be of several collectable types, each with their own unique artwork and animations. Players tend their grove by regularly watering, fertilizing, and harvesting from their trees and well-tended trees grow big and strong.</p>\n<p>Each tree has a unique name, fun facts, and secret stats that determine the bonuses it gives when harvesting. Harvested resources can be sold at the market for coin that in-turn can be used to expand the player's grove and help tend their trees.</p>\n<p>Grove is also a social app. Players can invite their friends to play with them and visit each other's trees. Lonely trees drop fewer seeds, but trees with friendly visitors are happier and more productive.</p>\n<p>The app also includes some optional in-app purchases that can provide additional boosts, or unlock a secret Developer Diary and custom avatars to show off to friends.</p>\n<p>As players tend and grow their grove, they earn achievements for their progress and rewards that help them advance further.</p>\n<h3>Where's the Wellness?</h3>\n<p>In Grove, as in real life, trees need space to grow; they can't be too close together. In order to plant trees, they need to be spaced apart and trees can only be watered, tended, and harvested from when the player is nearby. In essence, think of Grove as an app that encourages uses to go on a daily walk to tend their grove. Trees need to be spaced at least 30 meters (~100 ft) apart so there's plenty of walking to do when you've built up a full size grove. The app also awards bonuses and rewards for completing daily step goals.</p>\n<h3>And then there's Climate Change</h3>\n<p>Yup, you read that right. Climate Change is a gameplay mechanic.</p>\n<p>Trees in the real world naturally absorb carbon dioxide from the air and turn it into wood, leaves, and branches. One technical name for processes like this is Carbon Capture and Sequestration, and tree planting is one technique that can be used to mitigate the effects of Climate Change in our world today.</p>\n<p>In Grove, your trees capture carbon too! (virtual carbon that is) As your trees grow they capture carbon at the rate of real trees using data collected by the <a href=\"https://www.eea.europa.eu/articles/forests-health-and-climate-change/key-facts/trees-help-tackle-climate-change\">European Environment Agency</a>. This helps players get familiar with this crucial emerging technology and get a feel for just how much tree planting can do to help the environment. Also, there's achievements for capturing lots of carbon.</p>\n<h2>A New Challenger Appears!</h2>\n<p>I've been working on Grove for the past six months and it's been a blast to build. I've never built a game before and while Grove is technically more of a wellness and education app than a game, there are certainly game-like components.</p>\n<p>Grove is also the first iOS app I've built that heavily relies on custom assets. Usually I try to stick to drawing simple things in code or simply structuring the app to focus more on textual content, but for Grove that approach simply would not do. It needed to be cute, and it needed to be beautiful. I'd like to thank Grove's designer <a href=\"https://telesdesign.com\">Victor Teles</a> for everything he's done to give Grove a unique and adorable feel.</p>\n<p>If you'd like to learn more about how (and why) I built Grove, <a href=\"https://thegroveapp.com?ref=bs\">give the app a try</a> and unlock the Developer Diary. I've written a deep-dive there that goes into exactly why and how Grove came to be.</p>\n<p>I'm sure I'll be going into more detail on various aspects of Grove in due time, and especially on <a href=\"https://indiedevlife.fm\">my podcast: Indie Dev Life</a>, so be sure to stay tuned for updates.</p>\n<p>As always, thanks to all of my beta testers and to everyone who contributed to Grove. This launch would not be possible without you.</p>\n<p><a href=\"https://thegroveapp.com?ref=bs\">Check out Grove &#8594;</a></p>"}]}