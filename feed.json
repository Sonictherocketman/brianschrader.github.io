{"version": "https://jsonfeed.org/version/1", "title": "BiteofanApple", "home_page_url": "https://brianschrader.com", "feed_url": "https://brianschrader.com/feed.json", "description": "Thoughts, and ramblings about technology, programming, history,\n and whatever else I'm interested in.", "icon": "https://www.gravatar.com/avatar/11b074a636e00292c98e3e60f7e16595", "author": {"name": "Brian Schrader", "url": "https://brianschrader.com", "avatar": "https://www.gravatar.com/avatar/11b074a636e00292c98e3e60f7e16595"}, "items": [{"id": "http://brianschrader.com/archive/automated-podcasts-with-automator-amp-overcast/", "url": "http://brianschrader.com/archive/automated-podcasts-with-automator-amp-overcast/", "title": "Automated Podcasts with Automator &amp; Overcast", "date_published": "2021-08-24T20:59:00", "tags": ["blogging", "programming"], "author": {"name": "Brian Schrader"}, "content_html": "<p>I've <a href=\"/archive/siri-is-a-blogging-tool/\">mentioned before</a> that I use Siri as an editing tool. I write a piece, lightly edit it, and then have Siri read it back to me. This helps me catch unintended grammatical errors and clumsy sentences. Building on that principle, <a href=\"https://pine.blog\">Pine.blog</a> and <a href=\"https://hewellapp.com\">Hewell</a> both ship with a feature that use iOS's <code>AVSpeechSynthesizer</code> API to read articles or location information aloud.</p>\n<p>That said, I often find articles that I want to read, but after a long day staring at a computer screen, I don't want to actually <em>read</em> them. Lots of sites these days provide spoken audio for their articles&mdash;which is great&mdash;but the vast majority don't.</p>\n<p>That's where Automator comes in.</p>\n<p><img alt=\"Save Spoken Text to File\" src=\"/images/blog/automator-spoken-text.png\" /></p>\n<p>This Automator service simply runs a bash script that takes the contents of the selected text as input, feeds it to the built-in macOS <code>say</code> command, and outputs it to a file on the Desktop named using the contents in my clipboard.</p>\n<details>\n  <summary>Check out the full script</summary>\n<pre><code>cd ~/Desktop;\n# A hack to get stdin into say through Automator. For some\n# reason simply saying -f didn't work for me.\nwhile read line; do echo \"$line\" done < \"${1:-/dev/stdin}\" |\n    say -o .spoken_text -f -\n\nTITLE=\"$(pbpaste -Prefer txt)\"\nif [ -z \"$TITLE\" ]; then\n    TITLE=\"Spoken Text\"\nfi\n# Sanitize the article title. Writers love colons which macOS hates\nTITLE=\"$(echo \"$TITLE\" | sed -e 's/[^A-Za-z0-9._-]/_/g')\"\n\n# Conver the audio and be quiet about it\n/usr/local/bin/ffmpeg -i .spoken_text.aiff -loglevel -8 -y \"$TITLE.aac\"\nrm .spoken_text.aiff</code></pre>\n</details>\n\n<p>The script also uses FFmpeg to convert the audio to an AAC file so that I can then upload it to <a href=\"https://overcast.fm\">Overcast</a>, my preferred podcast player.</p>\n<p>By default, macOS will include Automater services in the right-click menu, but I've also bound the script to <code>Cmd+Ctl+Shift+S</code> (which is similar to my existing <code>Cmd+Ctl+S</code> shortcut for reading the selected text aloud).</p>\n<p><img alt=\"The macOS Services Menu\" src=\"/images/blog/services-menu-speak.png\" /></p>\n<p>Now, I can discover new articles to read, perform a quick set of keystrokes, upload the audio to Overcast, and then go for a walk while I catch up on the day's interesting news!<sup>1</sup></p>\n<p>I've provided the Automator service as a zip archive below if anyone wants to play with it.</p>\n<p><a href=\"/dropzone/Save Spoken Text to File.zip\">‚¨áÔ∏è Save Spoken Text to File.workflow</a></p>\n<hr />\n<div class=\"footnote\">\n    <p><sup>1.</sup>&nbsp;There are a few quirks to this workflow still. Websites are filled with non-article content, so to avoid selecting those, I typically following the following steps:\n    </p>\n    <ol>\n        <li>Turn on reader mode (<code>Cmd+Shift+R</code>)</li>\n        <li>Copy the title of the article to the clipboard (<code>Cmd+C</code>)</li>\n        <li>Select the article text (<code>Cmd+A</code>)</li>\n        <li>Run my Automator service (<code>Cmd+Ctl+Shift+S</code>)</li>\n        <li>Upload the new AAC file to Overcast</li>\n    </ol>\n    <p>I admit, it's a little cumbersome, but it does work really well.</p>\n</div>"}, {"id": "http://brianschrader.com/archive/retrospective-on-a-year-spent-writing/", "url": "http://brianschrader.com/archive/retrospective-on-a-year-spent-writing/", "title": "Retrospective on a Year Spent Writing", "date_published": "2021-08-23T23:28:00", "tags": ["writing", "meta", "blogging"], "author": {"name": "Brian Schrader"}, "content_html": "<p>Around this time last year, I started writing a lot. Since then, I've published <a href=\"https://goingindie.tech\">a book</a>, started a <a href=\"https://democracyandprogress.com\">policy blog</a>, and started writing for a <a href=\"https://sduptownnews.com/californians-deserve-better-data-protection/\">local paper</a>. All in all, I think it's safe to say that I've written about as many words in the past 12-15 months as over the preceding 10 years.</p>\n<p>A crude calculation of the word-count of this blog shows that I've written approximately 93,719 words. That's a lot, but considering that <a href=\"https://goingindie.tech\">Going Indie</a> is over 62,000 words and my published articles total almost 7,000, that 93,000 looks a lot less impressive.</p>\n<pre><code>$ find archive/ -name \"*.md\" | xargs -I {} cat {} | wc -w\n   93719\n</code></pre>\n<p>I've learned a lot about myself and my writing in the past year. I've learned how to pitch articles, how to build up the courage to submit them, and how to research and write about complex topics. I've also gotten better at defining my <a href=\"https://redalemeden.com/microblog/post-1570576215962\">assumed audience</a>.</p>\n<p>I'd always intended for this blog to be a place for me to write about whatever I wanted, and while I have written about a number of topics here, over time I've gravitated towards discussions of software, the tech industry, and personal matters. Last year, during the depths of the pandemic, I wanted to expand and write about public policy, but this blog never felt like the right place to do that. Hence why I started <a href=\"https://democracyandprogress.com\">Democracy &amp; Progress</a>, and why I continue to write for the local paper.</p>\n<p>Writing for both D&amp;P and the paper has helped me focus my energy on working to better inform people and convince them to take an interest in a given subject. It's also helped me better understand the in-depth nuances of topics I previously thought I knew something about. Nowadays, I write not only as a way to inform and convince others, but as an exercise to educate myself. They say you don't fully understand something until you try to teach it, and that truism has held strong for me this past year.</p>\n<p>Writing this much has also been a catalyst that pushes me to <a href=\"/archive/novels-and-insurmountable-tasks/\">write even more</a>.</p>\n<p>I've really enjoyed this deeper commitment to writing, and while it remains just a hobby, it's an incredibly fulfilling and enjoying one that I hope to continue as long as I can.</p>"}, {"id": "http://brianschrader.com/archive/grove/", "url": "http://brianschrader.com/archive/grove/", "title": "Grove, a new Tree-planting Wellness Game üéâ", "date_published": "2021-07-12T02:07:00", "tags": ["announcement", "software", "apps", "climate change", "gaming", "indie", "ios"], "author": {"name": "Brian Schrader"}, "content_html": "<p>Today marks the release of my newest app: Grove! Here's a brief description of the app from the <a href=\"https://thegroveapp.com?ref=bs\">product page</a>:</p>\n<p><a href=\"https://thegroveapp.com?ref=bs\"><img src=\"https://thegroveapp.com/img/icon.png\" alt=\"Grove Logo\" style=\"max-width:150px; width:80%; box-shadow:3px 3px 5px darkgrey; border-radius:30px; padding:0; margin:15px; float:right;\"></a></p>\n<blockquote>\n<p>Grove is an augmented-reality game where you plant virtual trees in the real world! Collect the various kinds of trees, learn about them, and earn achievements all while getting outdoors and enjoying your virtual garden.</p>\n<p>Grove is part game, part educational app, and part wellness app! In Grove you care for your trees and tend to your garden, and in turn, you stay fit and healthy.</p>\n<p>&mdash; <a href=\"https://thegroveapp.com?ref=bs\">Grove Product Page</a></p>\n</blockquote>\n<p>If you're at all interested in the app, please do give it a try, and let me know what you think. I can't wait to hear your feedback (and see some of your trees)!</p>\n<p><a href=\"https://thegroveapp.com?ref=bs\"><div style=\"text-align:center;\">\n    <img src=\"https://thegroveapp.com/img/v1.0/grove-full.png\"\n        alt=\"The grove view\"\n        width=\"400px\"\n        style=\"width:200px; display:inline-block;\"\n    />\n    <img src=\"https://thegroveapp.com/img/v1.0/plant.png\"\n        alt=\"A detail view\"\n        class=\"hide-on-mobile\"\n        width=\"400px\"\n        style=\"width:200px; display:inline-block;\"\n    />\n    <img src=\"https://thegroveapp.com/img/v1.0/market.png\"\n        alt=\"A detail view\"\n        class=\"hide-on-mobile\"\n        width=\"400px\"\n        style=\"width:200px; display:inline-block;\"\n    />\n</div></a></p>\n<h2>What is Grove?</h2>\n<p>At its core, Grove is part game, part AR-wellness app with some educational bits sprinkled in. The player plants virtual trees in real-life locations and builds out their virtual grove. Each tree is unique and randomly generated. Trees can be of several collectable types, each with their own unique artwork and animations. Players tend their grove by regularly watering, fertilizing, and harvesting from their trees and well-tended trees grow big and strong.</p>\n<p>Each tree has a unique name, fun facts, and secret stats that determine the bonuses it gives when harvesting. Harvested resources can be sold at the market for coin that in-turn can be used to expand the player's grove and help tend their trees.</p>\n<p>Grove is also a social app. Players can invite their friends to play with them and visit each other's trees. Lonely trees drop fewer seeds, but trees with friendly visitors are happier and more productive.</p>\n<p>The app also includes some optional in-app purchases that can provide additional boosts, or unlock a secret Developer Diary and custom avatars to show off to friends.</p>\n<p>As players tend and grow their grove, they earn achievements for their progress and rewards that help them advance further.</p>\n<h3>Where's the Wellness?</h3>\n<p>In Grove, as in real life, trees need space to grow; they can't be too close together. In order to plant trees, they need to be spaced apart and trees can only be watered, tended, and harvested from when the player is nearby. In essence, think of Grove as an app that encourages uses to go on a daily walk to tend their grove. Trees need to be spaced at least 30 meters (~100 ft) apart so there's plenty of walking to do when you've built up a full size grove. The app also awards bonuses and rewards for completing daily step goals.</p>\n<h3>And then there's Climate Change</h3>\n<p>Yup, you read that right. Climate Change is a gameplay mechanic.</p>\n<p>Trees in the real world naturally absorb carbon dioxide from the air and turn it into wood, leaves, and branches. One technical name for processes like this is Carbon Capture and Sequestration, and tree planting is one technique that can be used to mitigate the effects of Climate Change in our world today.</p>\n<p>In Grove, your trees capture carbon too! (virtual carbon that is) As your trees grow they capture carbon at the rate of real trees using data collected by the <a href=\"https://www.eea.europa.eu/articles/forests-health-and-climate-change/key-facts/trees-help-tackle-climate-change\">European Environment Agency</a>. This helps players get familiar with this crucial emerging technology and get a feel for just how much tree planting can do to help the environment. Also, there's achievements for capturing lots of carbon.</p>\n<h2>A New Challenger Appears!</h2>\n<p>I've been working on Grove for the past six months and it's been a blast to build. I've never built a game before and while Grove is technically more of a wellness and education app than a game, there are certainly game-like components.</p>\n<p>Grove is also the first iOS app I've built that heavily relies on custom assets. Usually I try to stick to drawing simple things in code or simply structuring the app to focus more on textual content, but for Grove that approach simply would not do. It needed to be cute, and it needed to be beautiful. I'd like to thank Grove's designer <a href=\"https://telesdesign.com\">Victor Teles</a> for everything he's done to give Grove a unique and adorable feel.</p>\n<p>If you'd like to learn more about how (and why) I built Grove, <a href=\"https://thegroveapp.com?ref=bs\">give the app a try</a> and unlock the Developer Diary. I've written a deep-dive there that goes into exactly why and how Grove came to be.</p>\n<p>I'm sure I'll be going into more detail on various aspects of Grove in due time, and especially on <a href=\"https://indiedevlife.fm\">my podcast: Indie Dev Life</a>, so be sure to stay tuned for updates.</p>\n<p>As always, thanks to all of my beta testers and to everyone who contributed to Grove. This launch would not be possible without you.</p>\n<p><a href=\"https://thegroveapp.com?ref=bs\">Check out Grove &#8594;</a></p>"}, {"id": "http://brianschrader.com/archive/unbounded-possibility-is-bad-for-productivity/", "url": "http://brianschrader.com/archive/unbounded-possibility-is-bad-for-productivity/", "title": "Unbounded Possibility is Bad for Productivity", "date_published": "2021-05-25T00:07:00", "tags": ["productivity"], "author": {"name": "Brian Schrader"}, "content_html": "<p>Being productive is hard; especially if you're working by yourself or working remotely. When you're working alone you have a lot of freedom, but that also means you have a lot of slack. No one is holding you to a schedule or deadline, and nothing is stopping you from procrastinating or getting distracted.</p>\n<p>Even when you're focused, it can be hard to decide what to focus on, since there's often no required order in which things be done. From an objective perspective, whether I choose to call my bank today or tomorrow makes absolutely no difference. The same is true with what features I choose to implement on any given day. As long as the features get done, the order and the exact date they're completed isn't really important. Some features must be done before others for technical reasons, but others are completely unrelated and can be developed in any order. But this ambiguity is precisely the problem.</p>\n<p>If you could work on anything at any time, what should you work on right now?</p>\n<p>I'm going to generalize here: I don't think humans deal with unbounded possibility very well. We long for some sort of structure&mdash;or at least I do. When presented with the choice of doing any feature I want, I'm left unfocused and forced to decide&mdash;moment by moment&mdash;what features to build, which not only wastes time, but increases decision fatigue.</p>\n<h2>Lights in the Infinite Dark</h2>\n<p>Speaking with a friend earlier over the weekend, we stumbled on a maxim that I think sums up the solution pretty well:</p>\n<blockquote>\n<p>Planning is the art of bringing order to chaos.</p>\n</blockquote>\n<p>I've found that arbitrary deadlines, like <a href=\"/archive/arbitrary-achievement-unlocked/\">arbitrary goals</a> keep me motivated and focused. Without some sort of deadline or goal, I feel adrift and it's difficult to force myself to work on anything for a significant period of time.  So I create artificial deadlines and goals, sometimes completely arbitrarily. Often times, I'll just pick a date on the calendar based on nothing but gut intuition, and then I change it later if necessary.</p>\n<p><div\n    class=\"images-side-by-side\"\n    style=\"display:flex;justify-content:center;text-align:center;flex-wrap:wrap;\"\n>\n    <div style=\"max-width: 300px;min-width: 200px; flex:1;\">\n        <b>Without goals and deadlines</b>\n        <img src=\"/images/blog/focus.png\" alt=\"Infinite Focus\" />\n        <caption><small>Infinite possibility gives no guidance.</small></caption>\n    </div>\n    <div style=\"max-width: 300px;min-width: 200px; flex:1;\">\n        <b>With goals and deadlines</b>\n        <img src=\"/images/blog/focus-focused.png\" alt=\"Focus with Direction\" />\n        <caption><small>Adding goals gives you a direction.</small></caption>\n    </div>\n</div>\n</p>\n<p>By setting completely arbitrary deadlines and goals, I'm able to narrow down the unbounded, infinite possibility that is creating software into a simple series of steps. This isn't a new idea; tons of people do this. I just find it interesting to think of deadlines this way.</p>\n<p>Whether your planning process involves ultra-precise scheduling, or just a notes file with some rough deadlines in it, having any sort of plan at all gives focus to your efforts and it guides you through the haze of infinite possibility.</p>\n<p>Even if your deadlines are completely arbitrary and can be changed at will, having them is the most important thing.</p>"}, {"id": "http://brianschrader.com/archive/imports-are-endorsements/", "url": "http://brianschrader.com/archive/imports-are-endorsements/", "title": "Imports are Endorsements", "date_published": "2021-05-20T18:00:00", "tags": ["software development", "programing"], "author": {"name": "Brian Schrader"}, "content_html": "<p>When you import someone's code, are you endorsing them?</p>\n<p>At first glance, the answer might seem simple: of course not! And while it's pretty obvious that imports are not universal endorsements of the code's author, they aren't entirely void of meaning either. Endorsements aren't an indivisible quanta&mdash;some fundamental particle that cannot be divided&mdash;they exist on a spectrum.</p>\n<h2>Supply chains are tricky things</h2>\n<p>Importing code written by someone else is always a risky endeavor. Most often external dependencies work and work well, but they also expose your software to additional risk. The fact that you are willing to depend on someone else's code implies some kind of inherent bond of trust. It implies a relationship between the developer (or organization) and the code author. Importantly, it also implies that the developer finds the author's code valuable in some way.</p>\n<p>Dependencies are part of a software's digital supply chain&mdash;along with any other provider we use to power our software. And in today's world, where alternative dependencies abound, many people understand that the various links in the supply chain aren't simply bound together out of mutual necessity. They choose to depend on each other, and so there are shared values and responsibilities that are common to all in the chain.</p>\n<p>Using an example out of the news, Apple doesn't manufacture many of the components in its devices, yet when it's partner Foxconn is found to be abusing workers, we place some of that blame on Apple for choosing to work with Foxconn given their past behavior. Similarly, Google and Microsoft do not generate their own power, yet they've made efforts to rid their supply chains of fossil fuels, and the public has&mdash;rightly&mdash;heaped praise on them for these actions. From fashion to technology we understand that companies are somewhat responsible for choosing ethical and responsible supply chain partners. Why should developers be any different?</p>\n<h2>Our decisions matter</h2>\n<p>I think most people would agree with the decision not to use software written by an outspoken white-supremacist, but even that extreme example implies that there is some threshold where the author's views would impact the technical decision to use a given toolset. The literature, music, and film worlds are well-accustomed to this debate. Authors leave a mark on their work. How big that mark is remains a subject of debate, but there's no debate that the author has at least some impact.</p>\n<p>Obviously big tech companies and organizations don't suffer because one company decides not to use their stuff&mdash;ideas require collective, industry-wide action to produce results.</p>\n<p>The point is that our decisions to use Facebook's frameworks, Google's toolsets, Apple's platforms, or Amazon's services must be informed by their creators' behaviors and policies. Sometimes these decisions will be good for business, and sometimes not. Other times they might be incredibly beneficial or utterly unremarkable. Regardless of their effects, these decisions matter.</p>\n<p>Some readers might bemoan this idea, claiming that I'm making software political, but everything is political in some form. Software doesn't exist in a vacuum and there are real consequences to our choices that echo beyond the apps and websites we build.</p>\n<p>Whether we like it or not, the role of engineers is to manipulate the real world to achieve some end, and how we do that work has just as much import as what end we achieve.</p>\n<p>I, for one, am driven to do what I can to mitigate the effects of Climate Change, so I host all of my new services <a href=\"https://nine9s.cloud/kb/infrastructure\">in data centers powered by renewable energy</a> and I'm working on migrating my existing services there as well. My hosting platform is a part of my digital supply chain, and I bear some responsibility for the emissions my services produce. The downside is that those servers are in Europe now, so my ping times suffer a bit, but to me that tradeoff was worth making.</p>\n<p>Destinations matter, but the road to the destination matters too. Developers achieve our ends through importing other people's code, and those imports matter. Choose yours well.</p>"}, {"id": "http://brianschrader.com/archive/easy-and-ethical-traffic-monitoring-with-goaccess/", "url": "http://brianschrader.com/archive/easy-and-ethical-traffic-monitoring-with-goaccess/", "title": "Easy and Ethical Traffic Monitoring with GoAccess", "date_published": "2021-05-03T18:08:00", "tags": ["software development", "blogging"], "author": {"name": "Brian Schrader"}, "content_html": "<p>Traffic monitoring is a staple for web businesses, but for some reason, we've outsourced a pretty simple problem to mischievous third-parties. While there are well-behaved traffic monitoring platforms, I've developed a few homegrown solutions that have worked really well for me and my business. If you're looking for an easy traffic monitoring solution, and you're conscious of your user's/visitor's privacy, you should try one of these solutions. I promise, they're pretty simple.</p>\n<h2>Option 1: Just Don't</h2>\n<p>You always have the option to just not do traffic monitoring. Often times we can convince ourselves that data we collect is precious or useful when it fulfills no real business or personal need.</p>\n<p>If you're a blogger, then traffic might matter to you, but <a href=\"https://inessential.com/2016/01/20/nick_on_twitter\">it probably shouldn't</a>. Back when <a href=\"/archive/removing-google-analytics/\">I used to use Google Analytics</a> I also had very few visitors to this site. Was it useful to know that 13 people had seen my article? Not really, but it felt useful. In the end it was just another stat for me to endlessly refresh. Progress bars are fun to watch, but you'd probably be better off writing another post, or just going for a walk.</p>\n<p>If you own a business that sells a product, then remember this: it's not actually relevant how many hits your website gets. It's important how many products you sell. At one point, <a href=\"https://goingindie.tech\">Going Indie</a> was featured on Product Hunt, which was awesome, but that featuring resulted in very few actual sales. Was it worth my time to endlessly refresh the PH dashboard? No, and I kinda wish I didn't have the option.</p>\n<p>Real-time dashboards are addictive dopamine factories. Sometimes it's better to just avoid them.</p>\n<h2>Option 2: Use GoAccess</h2>\n<p>If you need to have some sort of traffic monitoring, then give <a href=\"https://goaccess.io\">GoAccess</a> a try. GoAccess aggregates webserver access logs and provides reports either live in the shell, or as really elegant and self-contained HTML files.</p>\n<p>I've used GoAccess for years, and it's become my default solution for traffic monitoring. I've automated my reporting using my <a href=\"/archive/building-a-personalized-newsletter-with-bash-and-a-raspberry-pi/\">new helper RPi</a>. Every week, the RPi generates and aggregates the reports for my various websites and emails them to me.</p>\n<p><a href=\"https://rt.goaccess.io/?20210429113731&amp;ref=hpimg\"><img alt=\"Sample GoAccess Report\" src=\"/images/blog/goaccess.png\" /></a>\n<center><small><caption>A sample GoAccess HTML report</small></center></caption></p>\n<p>There are downsides to GoAccess though. Since it's using access logs, the numbers are inflated by bots and browser prefetching. GoAccess has ways to filter out some of those things, but in most cases, I've just gotten used to the numbers being bigger than they really should be.</p>\n<p>One upside to using server-side traffic monitoring is that your stats are unaffected by people who are using ad-blockers or who refuse to enable JavaScript (are there still people doing that?)</p>\n<h2>Option 3: Roll Your Own</h2>\n<p>For some projects, I've needed more reliable and accurate traffic stats. To do that, I decided it would be best to roll my own. As I said earlier, traffic monitoring is a pretty simple problem-domain&mdash;as long as you're willing to live with some margins of error. My <a href=\"http://democracyandprogress.com\">California policy blog</a> uses a homegrown traffic monitoring solution that is so maddeningly simple, I will include it below in its entirety&mdash;formatted for readability.</p>\n<pre><code>(function() {\n    if (window.fetch) setTimeout(function() {\n        fetch('/pageview?u=' + window.location.pathname)\n    }, 2000)\n})()\n</code></pre>\n<p>This snippet sets a timer for two seconds and then fires a request off to <code>/pageview</code> which simply returns a 200 response. The site is statically generated&mdash;just like this one&mdash;so it can't do any processing or custom request handling, and there's an empty file called pageview in the webroot directory. I join all of my access logs together, remove anything that doesn't contain a request to <code>/pageview</code> and voila!</p>\n<pre><code>zcat /var/log/nginx/access*gz | grep pageview &gt; $STATSFILE;\ncat /var/log/nginx/access.log | grep pageview &gt;&gt; $STATSFILE;\n\n/usr/local/bin/goaccess \\\n    -f $STATSFILE \\\n    --ignore-crawlers \\\n    -p /etc/goaccess.conf \\\n    &gt; $REPORTFILE;\n</code></pre>\n<p>These reports won't include any requests made by searchbots, any request that didn't execute the JavaScript, or any request made by a user that didn't keep the page open for at least two seconds. This solution gives me simple and effective traffic stats that leverage the data my servers were already collecting, with no additional or accidental data collection required!</p>\n<h2>What Really Matters</h2>\n<p>Traffic monitoring is a useful, but addictive tool, and it's easy to get caught up in the data they collect and convince yourself that it's more useful than it really is. At the end of the day, I just need to know, roughly, how many people read one of my articles or how many visited the homepage of a service I run. I don't need to know who they were or anything else about them, and I don't want more data than I need.</p>\n<p>Due to the limitations of server-side monitoring&mdash;even with my JS snippet&mdash;GoAccess can't provide you with exact traffic numbers; nothing can. But like I said, you probably don't need exact numbers. You probably only really need the order of magnitude, which server-side monitoring can easily provide.</p>"}, {"id": "http://brianschrader.com/archive/how-i-use-docker-for-now/", "url": "http://brianschrader.com/archive/how-i-use-docker-for-now/", "title": "How I Use Docker (for Now)", "date_published": "2021-04-30T01:05:00", "tags": ["software development"], "author": {"name": "Brian Schrader"}, "content_html": "<p>In a recent episode of <a href=\"https://indiedevlife.fm/archive/13-im-starting-to-regret-promising-things/\">Indie Dev Life</a> I went into some detail about how I use <a href=\"https://www.docker.com\">Docker</a> to host my software. I discussed my experiences with and guidelines for using Docker in production. This post is a continuation of that discussion.</p>\n<p>I've been using Docker to run my software in production ever since the launch of <a href=\"https://adventurerscodex.com\">Adventurer's Codex</a>, and <a href=\"https://mygenerank.scripps.edu\">MyGeneRank</a> back in 2017. In my technical discussion <a href=\"/archive/adventurers-codex-the-stack/\">blog post</a> for <a href=\"/archive/mygenerank-behind-the-scenes-of-the-newest-researchkit-app/\">both projects</a>, I talked a little bit about Docker and its place in the stack. I also discuss Docker and its role as a deployment tool briefly in <a href=\"https://goingindie.tech\">Going Indie</a>.</p>\n<blockquote>\n<p>Over the years I‚Äôve managed to tune my services to be incredibly easy to upgrade. For example, since Nine9s is written in Python and uses Docker, a deploy is simply a <code>git pull</code> and <code>docker-compose up</code>. Nowadays, even those steps are automated by a bash script. Having such a simple process means that I can deploy quickly, and it lessens the cognitive burden associated with upgrading a service, even when that service has gone without changes for months.</p>\n</blockquote>\n<p>Over time, Docker's role in my software has morphed and evolved. During the initial launch of Adventurer's Codex, I depended heavily on community-built Docker files for large portions of the architecture. But over time Docker has actually shrunk to fill a much more limited role.</p>\n<h2>The Problem Docker Solves (for Me)</h2>\n<details>\n  <summary>Context</summary>\n  <p>I use <a href=\"http://linode.com\" title=\"Linode\">Linode</a> for my server hosting, so I'm already operating within a VM, and depending on the software, I might have multiple virtual servers powering a given service. Docker simply provides isolation for processes on the same VM. I do not use Docker Swarm, and I've always just used the community edition of Docker.</p>\n</details>\n\n<p>To me, Docker has become a tool that makes it easy to upgrade and manage my own code and other supporting services. All of my code runs in a Docker container, but so do other systems that my code depends on. For example, Pine.blog and Nine9s both use memcache for <a href=\"https://docs.djangoproject.com/en/3.2/topics/cache/\">template caching</a> since support for it is built into Django&mdash;my preferred web framework. Each web server runs Nginx on the host which reverse-proxies to Docker containers running my Django apps.</p>\n<p>Both services also perform asynchronous processing via worker nodes. These workers are running inside of Docker. Pine.blog's workers are spread across various machines and pass requests through their own <a href=\"https://github.com/Sonictherocketman/johnny-cache\">custom forward caching proxy</a> containers backed by a shared Redis instance also in Docker.</p>\n<p>This setup ensures that I can easily upgrade my own code, and it ensures that exploitable services like memcache aren't exposed to the outside world.</p>\n<p>In short, I've found that Docker works great for parts of the stack that are either upgraded frequently or for parts of the stack that are largely extraneous and that only need to communicate with other parts on the same machine.</p>\n<p>I've largely stopped using Docker in cases where there are external tools that rely on things being installed on the host machine, or where the software requires more nuanced control. Nginx is a great example. All of my new projects have Nginx installed on the host, not in Docker. This is because so many tools from log monitoring to certbot are designed to run on a version of Nginx installed globally. I use Nginx as both a webserver for static content and a reverse-proxy to my Django apps. If you want to use Nginx in Docker, I'd suggest only using it for the former case. The latter is better installed on the host.</p>\n<p>I'm still torn about running my databases and task brokers in Docker. Docker (without Swarm) really annoys me when I'm configuring services that need to be accessed by outside actors. Docker punches through CentOS firewalls which renders most of my typical tactics for securing things moot. I've also started to question the usefulness of Docker when I'm configuring a machine that serves only one purpose. Docker is great at isolating multiple pieces of a stack from each other, but on a single-purpose VM it seems like it's just another useless layer that's only there for consistency.</p>\n<p>Docker on CentOS is particularly irritating as the <code>devicemapper</code> doesn't seem to release disk space that it no longer needs. This means that your server is slowly loosing useful disk space every time you update and rebuild your containers. After about 3 years of upgrades, Pine.blog's main server has lost about 20GB of storage to this bug. Needless to say, I'm investigating a move to Ubuntu in the near future.</p>\n<h2>What about Docker in Development?</h2>\n<p>As with Docker in production, I have mixed feelings about the role Docker plays in my development. I dev on a Macbook Pro, and my Django apps run in a plain-old virtual environment. No Docker there. That said, I do use Docker to run extraneous services&mdash;like Redis, memcache, or that forward caching proxy.</p>\n<p>I stopped running my Django apps in Docker a while back for much the same reason that I no longer run Nginx in Docker. Even with Docker's recommended fixes, Django's management CLI is frustrating to use through Docker and I've had more than one issue with Docker's buffering of log output during development.</p>\n<h2>Docker: Four Years In</h2>\n<p>Overall, I really like Docker. It makes deployments super simple: just <code>git pull</code> and <code>docker-compose up</code> (or use my fancy shell script that does zero-downtime deploys). That said, I'm certainly not a Docker purist. I use Docker in a way that reduces the friction of my deploys, and I'm starting to use it less and less when it's just another layer that serves little purpose.</p>\n<p>Like every tool, Docker has it's role to play, but in my experience it's not the silver bullet that many people think. I haven't used Docker on AWS via ECS, so I can't comment on that. Perhaps that's where Docker really shines. I still prefer a more traditional hosting strategy. Either way, Docker will remain an important tool in my toolbelt for the foreseeable future.</p>"}, {"id": "http://brianschrader.com/archive/lessons-on-variable-naming-from-breakfast-burritos/", "url": "http://brianschrader.com/archive/lessons-on-variable-naming-from-breakfast-burritos/", "title": "Lessons on Variable Naming from Breakfast Burritos", "date_published": "2021-04-17T01:19:00", "tags": ["programming", "software development", "fun"], "author": {"name": "Brian Schrader"}, "content_html": "<p>This morning I ordered a breakfast burrito from a local taco shop. Normally this would not be news and obviously would not warrant a blog post or any in-depth analysis, but it was early and I hadn't yet had coffee, so my mind was loose and my thoughts wandering. As I looked over the menu, I pondered the two vegetarian breakfast burrito options:</p>\n<ul>\n<li><strong>Mushroom burrito</strong> filled with mushrooms, potatoes, eggs, and cheese</li>\n<li><strong>Potato burrito</strong> filled with potatoes, eggs, beans, and cheese</li>\n</ul>\n<p>At the counter I asked for the potato breakfast burrito, and I intended to order the latter of the two, but it occurred to me that they both contained potatoes and therefor my order was ambiguous. What after all makes a burrito with potatoes, eggs cheese, and mushrooms deserve a different name than a burrito with potatoes, beans, eggs, and cheese? What makes the latter not a bean breakfast burrito, as the beans are the item that is unique to the latter burrito whereas potatoes are common to both? Are potatoes a more significant ingredient? If so, why?</p>\n<p>I received my order&mdash;which was correct by the way&mdash;and went home, but as I walked I wondered, how is it that the cashier and I understood each other? There was so much ambiguity in the names of those menu items. How were we able to make sense of the obvious ambiguity?</p>\n<h2>Naming is <strong>Really</strong> Hard</h2>\n<p>If you haven't seen the connection by now, let me drop the pretext. These same questions also relate to how we choose to name our variables and our functions in code. Naming after all is hard, and I think my burrito example helps explain why.</p>\n<blockquote>\n<p>It is often said that the three hardest problems in computer science are naming and off-by-one errors.</p>\n</blockquote>\n<p>In a more rigorous naming system, I assume that most people would come to the conclusion that the second burrito is probably mis-named. It should be called the \"bean breakfast burrito\" since, as I mentioned, the beans are the distinct ingredient that make the latter burrito not strictly a subset of the former.</p>\n<p>That said, beans are not normally considered a main ingredient in a burrito. In the conventional burrito naming scheme, more appealing or distinct ingredients, or ingredients not considered to be condiments, take precedence. This naming scheme is the reason why a burrito with carne asada, pico de gallo, and guacamole would be simply called a carne asada burrito and not a guacamole burrito.</p>\n<p>These same conventions exist when we name variables and functions. We can imagine a scenario where we have a list of users and need to filter out which users have recently logged in and which among those have active subscriptions to our service.</p>\n<pre><code>def get_active_subscribed_users():\n    all_users = get_all_users()\n    active_users = (user for user in all_users if user.is_active)\n    &lt;variable&gt; = (user for user in active_users if user.has_active_subscription)\n</code></pre>\n<p>The first two variable names are fairly obvious, the question becomes: what do we name the third variable so that it is not ambiguous? We could of course call this new variable <code>active_users_with_active_subscriptions</code>, but to many that would be too long, and to my eyes that makes it seem that this variable contains a list of <code>(user, subscription)</code> pairs.</p>\n<p>We could name the value <code>active_users</code>, <code>actively_subscribed_users</code>, or even just <code>relevant_users</code> if the criteria for what relevancy means is clear enough in context. Some developers prefer to simply refer to these as <code>users</code> but I find that incredibly confusing. Others may prefer to define the variable <code>users</code> and then redefine it as they filter down the list to suit their needs, which I find even more confusing and unclear.</p>\n<p>In practice I tend to prefer the third option along with a comment explaining what I mean by \"relevant\". This only exacerbates our problems though. If two groups of \"relevant\" users meet in a new context, their names would clash and we would need to find new names for these groups.</p>\n<p>The context is here is key. If we instead fetched the same list from another function call, we could drop the qualifier entirely.</p>\n<pre><code>def get_active_subscribed_users():\n    users = get_active_users()\n    # We can avoid the question entirely if we simply return the list here.\n    return (user for user in users if user.has_active_subscription)\n</code></pre>\n<h2>Names are a Leaky Abstraction</h2>\n<p>As with our breakfast burritos, we could simply default to the names being a list of the components, but that can become overly burdensome very quickly. Our potato burrito would be unceremoniously called the \"potato, eggs, bean and cheese breakfast burrito\", which is unambiguous but also cumbersome. It can also cause problems as forgetting to mention a single component could confuse the reader and lead them to believe that a reference to a potato, egg, and bean burrito was not the same as your potato, egg, bean, and cheese burrito even if you were both referring to the same thing.</p>\n<p>As programmers we aren't taxed by the character; we can have longer variable names, but at best those names should be descriptive, succinct, and distinct. Issues arise when names, by their nature, don't convey the whole story. Names almost always convey a summary of their true meaning. They can't effectively convey the context in which the name was given or the inherent value of the named thing. Out of context a name might be confusing, but that confusion may vanish when used in the appropriate context.</p>\n<p>Likewise, in some contexts a potato breakfast burrito is the same thing as a mushroom burrito, but today it wasn't.</p>"}, {"id": "http://brianschrader.com/archive/building-a-personalized-newsletter-with-bash-and-a-raspberry-pi/", "url": "http://brianschrader.com/archive/building-a-personalized-newsletter-with-bash-and-a-raspberry-pi/", "title": "Building a Personalized Newsletter with Bash and a Raspberry Pi", "date_published": "2021-04-03T21:02:00", "tags": ["programming", "fun"], "author": {"name": "Brian Schrader"}, "content_html": "<p>I use <a href=\"https://pinboard.in/\">Pinboard</a> to save articles I've read and, increasingly, to save articles I <em>want</em> to read. That said I rarely go back and actually read things once they disappear into the Pinboard void. This isn't an uncommon problem, I know, but I think I've devised a simple solution.</p>\n<p>I recently set up a Raspberry Pi and mounted it under my desk. I've been playing with RPis for years, but I'd never found a recurring need for them, they've always been toys with fleeting amusement value. But this time around, I've configured it as both a local web server and Samba file share. This allows me to quickly and easily share files with the RPi and, since I configured it to send emails through my Fastmail account, it can now alert me whenever I want.</p>\n<h2>My Pinboard Weekly Newsletter</h2>\n<p>Now that everything on the RPi is set up and easily accessable, I wrote up a simple <a href=\"https://gist.github.com/Sonictherocketman/8504244c5c916f41dc7815e28f297b86\">bash script</a> to pull my most recent bookmarks from Pinboard, filter out the stuff I've already read, and draft an email with everything from the past week that I still haven't gotten to.</p>\n<p>I've posted a simplified version <a href=\"https://gist.github.com/Sonictherocketman/8504244c5c916f41dc7815e28f297b86\">on Github</a>, but my real script isn't much more complex&mdash;all told it comes out to 55 lines of code&mdash;and it's run with a simple, weekly cron job.</p>\n<p><img alt=\"Pinboard Weekly\" src=\"/images/blog/pinboard-weekly.png\" />\n<center><small><i>Here's a sample of the newsletter email&mdash;and yes, my RPi's name is Demin.</i></small></center></p>\n<p>Hopefully this weekly newsletter reminds me to actually go back and read the interesting news and articles I've collected during the week (or it will help remind me just how unimportant certain things really are when you've had a week to let them sit).</p>\n<p>If you use Pinboard, and you constantly find yourself saving articles and never reading them, give my script a try. If you do, let me know what you think!</p>"}, {"id": "http://brianschrader.com/archive/why-all-my-servers-have-an-8gb-empty-file/", "url": "http://brianschrader.com/archive/why-all-my-servers-have-an-8gb-empty-file/", "title": "Why All My Servers Have an 8GB Empty File", "date_published": "2021-03-25T18:39:00", "tags": ["marco", "software development", "web dev"], "author": {"name": "Brian Schrader"}, "content_html": "<p>Last night I was listening to the latest <a href=\"https://www.relay.fm/radar/213\">Under the Radar</a>, where Marco Arment dove into nerdy detail about his recent <a href=\"https://overcast.fm\">Overcast</a> server issues. The discussion was great, and you should listen to it, but Marco's recent server troubles were pretty similar to my own <a href=\"/archive/pineblog-downtime-post-mortem-a-story-of-finite-resources/\">server issues</a> from last year, and so I figured I'd share my life-hack solution for anyone out there with the same problem.</p>\n<h2>The what and where</h2>\n<p>Both hosts, Marco Arment and David Smith, run their own servers on Linode&mdash;as do I&mdash;and I found myself nodding along in solidarity with Marco as he discussed his toils during a painful database server migration. Here's the crux of what happened in <a href=\"https://overcast.fm/+FgnbaF18Q/14:09\">Marco's own words</a>:</p>\n<blockquote>\n<p>The disk filled up, and that's one thing you don't want on a Linux server&mdash;or a Mac for that matter. When the disk is full nothing good happens.</p>\n</blockquote>\n<p>One thing Marco said hit me particularly close to home:</p>\n<blockquote>\n<p>Server administration, when you're an indie, is very lonely.</p>\n</blockquote>\n<p>During my major downtime problem last year, I felt incredibly isolated and frustrated. There was no one to help me and no time to spare. My site was down and it was down for a while. My problem was basically the same: my database server filled up (but for a different reason). And as Marco said, when the disk is full, nothing good happens.</p>\n<p>In the days after I fixed my server issues, I wanted to ensure that even if things got filled up again, I would never have trouble fixing the problem.</p>\n<h2>A cheap hack? Yes. Effective? Also Yes.</h2>\n<p>On Linux servers it can be incredibly difficult for any process to succeed if the disk is full. Copy commands and even deletions can fail or take forever as memory tries to swap to a full disk and there's very little you can do to free up large chunks of space. But what if there was a way to free up a large chunk of space on disk right when you need it most? Enter the <code>dd</code> command<sup>1</sup>.</p>\n<p>As of last year, all of my servers have an 8GB empty <code>spacer.img</code> file that does absolutely nothing except take up space. That way in a moment of full-disk crisis I can simply delete it and buy myself some critical time to debug and fix the problem. 8GB is a significant amount of space, but storage is cheap enough these days that hoarding that much space is basically unnoticeable... until I really need it. Then it makes all the difference in the world.</p>\n<p>That's it. That's why I keep a useless file on disk at all times: so I can one day delete it. This solution is super simple, trivial to implement, and easy to utilize. Obviously the real solution is to not fill up the database server, but as with Marco's migration woes, sometimes servers do fill up because of simple mistakes or design flaws. When that time comes, it's good to have a plan, because otherwise you're stuck with a full disk and a really bad day.</p>\n<div class=\"footnote\">\n<sup>1</sup> There are <a href=\"https://www.cyberciti.biz/faq/howto-create-lage-files-with-dd-command/\"> lots of tools you can use to do</a> this besides dd. I just prefer it.\n</div>"}]}