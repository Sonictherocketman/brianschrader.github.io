{"home_page_url": "https://brianschrader.com", "version": "https://jsonfeed.org/version/1", "description": "Thoughts, and ramblings about technology, programming, history,\n and whatever else I'm interested in.", "feed_url": "https://brianschrader.com/feed.json", "title": "BiteofanApple", "items": [{"author": {"name": "Brian Schrader"}, "url": "http://brianschrader.com/archive/programming-misconceptions/", "tags": ["programming", "software", "funny"], "content_html": "<p>Along the lines of my post about <a href=\"/archive/assumptions-and-variable-names/\">assumptions and variable names</a>, here's a list of a few common programming misconceptions that I often run into (with other people's code and with my own).</p>\n<blockquote>\n<p>What you think the code does is often not the same as what it actually does.</p>\n<p>There is a big difference between: intended, expected, and desired. Something can be both intended and expected, but undesired; but it can also be intended and desired, but unexpected.</p>\n</blockquote>\n<p>And my personal favorite:</p>\n<blockquote>\n<p>What the method/function name says it does is not the same as what it actually does.</p>\n</blockquote>\n<p>Naming is hard.</p>", "date_published": "2020-11-23T03:35:00-08:00", "title": "Programming Misconceptions", "id": "http://brianschrader.com/archive/programming-misconceptions/"}, {"author": {"name": "Brian Schrader"}, "url": "http://brianschrader.com/archive/going-indie-is-out-/", "tags": ["announcement", "launch", "book", "going indie"], "content_html": "<p><em>I never get tired of saying this</em></p>\n<p><a href=\"https://goingindie.tech/\" title=\"Going Indie\">\n    <img src=\"https://goingindie.tech/static/cover-icon.jpg\"\n        alt=\"Going Indie Cover Art\"\n        style=\"width:220px; display:inline-block;box-shadow: 1px 1px 3px black;padding:0px;margin-left:16px;\"\n        class=\"image-right\"\n    />\n</a></p>\n<p>Today I'm thrilled to announce that my book, Going Indie: A Complete Guide to becoming an Independent Software Developer, <a href=\"https://goingindie.tech\">is out and available to purchase</a>! The book has been in pre-order for a few weeks, but today is the official launch!</p>\n<p>Writing and publishing a book has been a crazy endeavor, and I've learned a lot during the process, both about myself and my capabilities, and about the process and work involved in book publishing.</p>\n<p>Thank you to everyone who proof-read the book and who contributed to making it a reality. Like it says in the acknowledgements, a special thanks must go to my editor and friend, Jenn Sardina, who helped me wrangle the book from the rambling that it was into the sleek product it became. Thanks to my proof-readers, to my designer, and to all of my friends and family for their support during this process.</p>\n<p>There's a lot of improvements I'd like to make to the book, and perhaps there's a second edition on the horizon someday. For now, to all of those who've purchased a copy of Going Indie, I say thank you. I hope you enjoy the book and I hope that it helps convince you to go indie yourselves.</p>", "date_published": "2020-11-18T19:43:00-08:00", "title": "Going Indie is Out! üìöüöÄ", "id": "http://brianschrader.com/archive/going-indie-is-out-/"}, {"author": {"name": "Brian Schrader"}, "url": "http://brianschrader.com/archive/announcing-hewell-public-beta-/", "tags": ["announcement", "app", "ios", "beta"], "content_html": "<p>Today I'm happy to announce the public beta for my newest app <a href=\"https://hewellapp.com\">Hewell: A Virtual Tour Guide</a>. I've wanted to build something like Hewell for years, and I finally got around to it. The app is in Public Beta on iOS, so you won't find it in the App Store just yet, but you're free to try it out and give feedback via TestFlight.</p>\n<p><img src=\"https://hewellapp.com/img/apple-touch-icon.png\" alt=\"Hewell Logo\" style=\"max-width:150px; width:80%; box-shadow:3px 3px 5px darkgrey; border-radius:30px; padding:0; margin:15px; float:right;\"></p>\n<blockquote>\n<p>Hewell is a virtual tour guide that automatically finds interesting things around you whether you're in a new city or your home town.</p>\n</blockquote>\n<p>The world around us is full of awesome things and so many of them go unnoticed and unappreciated. Hewell helps you uncover the interesting and fascinating places in the world, whether you're on a trip, or just wanding around your home town.</p>\n<p>Hewell is a privacy-respecting, open-data powered app that uses the power of Wikidata and Wikipedia to tell you more about the world around you. You could of course get all the benefits of Hewell by simply searching Wikipedia for everything interesting around you, but who does that? Hewell brings the enormous potential of open data to you right when you need it.</p>\n<p>With Hewell you can discover cool spots, learn about their history, listen to a narrated guide for each place, vote and recommend great spots for other Hewell users, and earn badges for your efforts. I have a lot more great stuff planned for Hewell in the coming updates, but I wanted to get something out relatively quickly and get feedback.</p>\n<p>If you're interested, please give the app a try and let me know what interesting things are in your area.</p>\n<p><a href=\"https://hewellapp.com\">Check out Hewell &#8594;</a></p>\n<div style=\"text-align:center;\">\n    <img src=\"https://hewellapp.com/img/beta/list.png\"\n        alt=\"The overview in Hewell\"\n        width=\"500px\"\n        style=\"width:220px; display:inline-block;\"\n    />\n    <img src=\"https://hewellapp.com/img/beta/detail.png\"\n        alt=\"A listing in Hewell\"\n        width=\"500px\"\n        style=\"width:220px; display:inline-block;\"\n    />\n</div>", "date_published": "2020-11-10T21:21:00-08:00", "title": "Announcing: Hewell Public Beta üéâ", "id": "http://brianschrader.com/archive/announcing-hewell-public-beta-/"}, {"author": {"name": "Brian Schrader"}, "url": "http://brianschrader.com/archive/house-judiciary-committee-recommends-interoperable-social-media/", "tags": ["law", "social media", "antitrust", "web", "open web"], "content_html": "<p>Today the <a href=\"/images/blog/investigation_of_competition_in_digital_markets_majority_staff_report_and_recommendations.pdf\">House Judiciary Committee released its report</a> detailing the numerous anti-competitive practices employed by the big tech firms: Apple, Amazon, Facebook, and Google. The report details why these firms are under investigation, what role they play in their respective markets, and whether they have achieved monopoly status in those markets (spoiler, it says they have). The report looks at the web search, web advertising, social media, e-commerce, and mobile software distribution markets, their history, and their future. It's a long read, but you should check it out, at least through the Executive Summary section.</p>\n<p>Importantly, the authors also make a number of recommendations aimed at fixing the problems they identified in the report. This is where things get interesting. The report recommends a lot of what open web folks (like myself) have been wanting for years. Here's a few of the most relevant recommendations (emphasis mine):</p>\n<blockquote>\n<ul>\n<li>Structural separations and <strong>prohibitions of certain dominant platforms from operating in adjacent lines of business</strong>;</li>\n<li>Nondiscrimination requirements, <strong>prohibiting dominant platforms from engaging in self-preferencing, and requiring them to offer equal terms for equal products and services</strong>;</li>\n<li><strong>Interoperability and data portability</strong>, requiring dominant platforms to make their services compatible with various networks and to make content and information easily portable between them;</li>\n<li><strong>Safe harbor for news publishers</strong> in order to safeguard a free and diverse press;</li>\n<li><strong>Prohibitions on abuses of superior bargaining power</strong>, proscribing dominant platforms from engaging in contracting practices that derive from their dominant market position, and requiring due process protections for individuals and businesses dependent on the dominant platforms;</li>\n<li>Strengthening private enforcement, through <strong>eliminating obstacles such as forced arbitration clauses</strong>, limits on class action formation, judicially created standards constraining what constitutes an antitrust injury, and unduly high pleading standards.</li>\n</ul>\n<p><em>p. 20-12</em></p>\n</blockquote>\n<p>This is great news! These reforms would, in my opinion, do a lot to level the playing field that currently tilts towards benefitting these large incumbents. Each and every one of these companies benefitted by taking advantage of the power of the Open Web in their early days and most still do in some form, but they contribute nothing back and they actively work to undermine the things that make the Web and the Internet great. The report explicitly calls out Facebook's lack of interoperability and recommends that social media companies be forced to interoperate and provide data portability in the same way that phone carriers are currently required to do.</p>\n<blockquote>\n<p>As a result, these markets are no longer contestable by new entrants, the competitive process shifts from ‚Äúcompetition in the market to competition for the market.‚Äù</p>\n<p>This dynamic is particularly evident in the social networking market...</p>\n<p>In response to these concerns, Subcommittee staff recommends that Congress consider data interoperability and portability to encourage competition by lowering entry barriers for competitors and switching costs by consumers. These reforms would complement vigorous antitrust enforcement by spurring competitive entry.</p>\n<p><strong>a. Interoperability</strong></p>\n<p>Interoperability is fundamental to the open internet. It is present in email, which is an open, interoperable protocol for communicating online regardless of a person‚Äôs email service or the type of the device they use to send the email.</p>\n<p>An interoperability requirement would allow competing social networking platforms to interconnect with dominant firms to ensure that users can communicate across services. Foremost, interoperability ‚Äúbreaks the power of network effects‚Äù...</p>\n<p><em>p. 384</em></p>\n</blockquote>\n<p>Open Web folks won't be surprised by any of these recommendations. We've been wanting them for years, but it appears that Congress is finally paying attention. There's a lot more in this report than just social media market reforms, but in my opinion these reforms are the most exciting and the most impactful to our discourse on the Web. Hopefully now that the wheels of government are turning, they move to enact some of these long-awaited and way-overdue reforms and give us back the Open Web we want.</p>", "date_published": "2020-10-07T01:46:00-08:00", "title": "House Judiciary Committee recommends Interoperable Social Media", "id": "http://brianschrader.com/archive/house-judiciary-committee-recommends-interoperable-social-media/"}, {"author": {"name": "Brian Schrader"}, "url": "http://brianschrader.com/archive/assumptions-and-variable-names/", "tags": ["software development", "knowing", "philosophy", "variable naming"], "content_html": "<p>As developers, we make a lot of assumptions about the world. We have to. The world is messy, unorganized, unsorted, and chaotic, and so is the data that this world generates. It's nigh impossible to process data in an orderly fashion if you can't organize it and make meaningful distinctions between different categories. Consider how much more difficult it would be for a music service to recommend titles if we didn't group music into genres, or how utterly meaningless it would be to say that COVID case counts were rising or falling if you couldn't say where or when. Developers are one of many groups of people who's job is largely to categorize and process data. We employ different methods than other disciplines, but the principle is the same. The problem is that almost any attempt to categorize the real world is fraught with peril. The world doesn't fit nicely into groups. It feeds back into itself in knotted and tangled ways. Few natural categories exist, and this means that in order for us to categorize the world, we need to construct those categories ourselves. These categories are build on assumptions about the world, but they're only assumptions. They can and will be broken, and when our assumptions no longer hold, they cause bugs.</p>\n<h3>What does this have to do with code?</h3>\n<p>A lot actually. When we write code we give names to various data points. We call one bit of memory a <code>username</code> and the other an <code>email_address</code>. Sometimes, like with more fundamental computer-science concepts, we can mathematically or physically guarantee that certain data is what it claims to be. Other times, we simply define a byte as 8-bits or a given variable as an <code>int</code> and not a <code>string</code>. Importantly, these definitions are assumptions. They assume that the hardware the code runs on works a certain way or that the system can be expected to do what the OS claims it will do, but that's a topic for another time.</p>\n<p>Many bugs are the cause of failed assumptions. Some languages try to reduce the number of assumptions that a developer needs to make by guaranteeing that variables defined as a certain type will always hold data that is that type, but fundamentally, there are much bigger problems plaguing software than type checking. For example, type checking can guarantee that a given variable called <code>html_string</code> contains a string value and that it always will, but it can't guarantee that the string is actually HTML. It could be an email address or it could just be invalid HTML. Both are strings, sure, but that's not the whole story.</p>\n<p>We often make the mistake of asserting more certainty in our code than is rightfully there. When we accept data from a user, we can't guarantee what the data is until we've validated it. When parsing batch data or data gathered from the Web, the situation is the same. Pine.blog encounters this a lot. As a feed reader, Pine.blog must parse feeds from the Web at large, but RSS and Atom feeds in the wild are notorious for being malformed and invalid (and sometimes just plain wrong). I've even come across a site that returned a PDF when requesting its RSS feed. Until the data is validated, you can only assume what the data contains. Years ago, I started coming up with ways to help me identify when I'm making assumptions in my code in an effort to reduce bugs, improve clarity, and minimize assumptions.</p>\n<p>In the Pine.blog source code, there are quite a few examples of this explicit assumption-making process, especially in my variable names. When Pine.blog first receives data from a request, it needs to try to parse that data, but it can't do that until I know what kind of feed it is. To do this I have a series of functions that use a bunch of heuristics to check the data and determine what it contains.</p>\n<pre><code>def is_probably_an_rss_feed(tree):\n    pass\n\ndef is_probably_an_atom_feed(tree):\n    pass\n\ndef is_probably_a_json_feed(tree):\n    pass\n</code></pre>\n<p>The important thing here is the word <code>probably</code>. These functions don't attempt to actually parse the data, so they don't know for sure. By explicitly qualifying what these functions do I, as the programmer, understand the assumptions I'm making when I act on that information.</p>\n<p>I do this a lot actually. It's common for my variables to contain the words <code>probably</code> or <code>approximate</code> if I'm not 100% sure that the data is valid or correct. Variables that contain these words immediately cause concern and force me to think about the potential failure modes whenever I attempt to manipulate them. If something says that it is an <code>html_string</code> than you don't usually think to second-guess that fact, but until you know that for sure, you may want to name your variable <code>probably_an_html_string</code> to better reflect your knowledge at the given point in your process.</p>\n<p><img\n    src=\"/images/blog/approximate-update-frequency.png\"\n    class=\"image-right hide-on-mobile\"\n    alt=\"Pine.blog Approximate Update Frequency\"\n/></p>\n<h3>Handling Approximations</h3>\n<p>As a guide to users, Pine.blog tries to determine the frequency that a given feed contains new items. Twitter users may be familiar with <a href=\"https://allenpike.com/2009/announcing-unladen-follow\">Unladen Follow</a> which does the same thing for Twitter accounts, or how the podcast app <a href=\"https://overcast.fm\">Overcast</a> does the same thing. This feature lets potential followers know how often a given feed will have new posts. This value is generally pretty simple to calculate, but because it's something determined by Pine.blog and not set by the site owner, this value is descriptive not prescriptive. It describes what is likely the update frequency based on past publishing habits. This measure cannot completely predict a site's future behavior, it's just a guess. To reflect that, my code calls this variable <code>approximate_update_frequency</code>, because it's just that <code>approximate</code>. Some would probably prefer the word <code>estimated</code>, which is certainly clearer, but the point is the same. The variable name conveys just as much confidence as possible without giving other developers (including future me) the false impression that the data is any more certain or guaranteed than it actually is.</p>\n<p>Developers like guarantees. We like to know that data won't change on us without warning and that things are what they claim to be. This is why so many developers care deeply about variable naming. No one likes variables that are outright incorrect. If you saw a variable in a codebase called <code>bank_account_number</code>, but upon inspection, you saw that it contained a user's first and last name, you would be understandably confused and irritated. The original developer of that code either didn't account for a certain case, incorrectly assigned that data to the wrong variable, or they simply lied to you. The same is true when we name a given variable <code>html_string</code>, but it turns out to contain invalid data. The variable name lied to us. By naming variables you're making assumptions and you're making promises to yourself and to later developers about what the variable contains. If you're not sure about what the data is, or can't guarantee that fact, then you should probably say so.</p>", "date_published": "2020-10-01T22:00:00-08:00", "title": "Assumptions and Variable Names", "id": "http://brianschrader.com/archive/assumptions-and-variable-names/"}, {"author": {"name": "Brian Schrader"}, "url": "http://brianschrader.com/archive/the-indie-dev-life-podcast/", "tags": ["podcast", "software development", "indie dev", "announcement"], "content_html": "<p><img\n    class=\"image-right hide-on-mobile\"\n    src=\"https://indiedevlife.fm/static/cover.png\"\n    width=\"250\"\n    height=\"250\"\n    style=\"width:250px;height:250px;\"\n/></p>\n<p><img\n    class=\"image-center show-on-mobile\"\n    src=\"https://indiedevlife.fm/static/cover.png\"\n    width=\"300\"\n    height=\"300\"\n    style=\"width:300px;height:300px;\"\n/></p>\n<p>Today I'm excited to announce my new podcast. <a href=\"https://indiedevlife.fm\">Indie Dev Life</a> is a show about the ins and outs of indie software development, and episode 1 is out today in all the right places.</p>\n<p>I've wanted to make a podcast for years, but I've never found a topic or theme that I felt I could adequately discuss. Luckily, that changed when I finished writing my upcoming book: <a href=\"https://goingindie.tech\">Going Indie</a>. There was so much that didn't make it into the final draft, and a podcast is the perfect place to expand and explore the more complex, technical and nuanced topics I didn't get to in the book.</p>\n<p>The first episode is an attempt to dispel any myths about Indie Development and help convince you to go independent yourself.</p>\n<p>I'd love any feedback on the show, the audio quality, or the format and I'd appreciate any topic suggestions. I hope you'll all give <a href=\"https://indiedevlife.fm\">Indie Dev Life</a> a listen. If you like the show, please subscribe and give it a review on <a href=\"https://podcasts.apple.com/us/podcast/indie-dev-life/id1533547186\">Apple Podcasts</a>.</p>", "date_published": "2020-09-28T19:57:00-08:00", "title": "The Indie Dev Life Podcast", "id": "http://brianschrader.com/archive/the-indie-dev-life-podcast/"}, {"author": {"name": "Brian Schrader"}, "url": "http://brianschrader.com/archive/git-hooks-for-fun-and-profit/", "tags": ["git", "hooks", "automation", "bash", "hacks", "web dev"], "content_html": "<p>I love Git hooks. For those who aren't aware, Git hooks allow you to specify actions that will be automatically taken whenever certain Git commands start or complete. Git hooks are great for simple, easily forgettable, automate-able tasks. In most projects, <a href=\"/archive/remembering-things-is-hard/\">I use Git hooks</a> to <a href=\"https://gist.github.com/Sonictherocketman/b196995f768eda4411e0771e9c509237\">automatically run preflight checks</a> before I'm allowed to commit any changes to a codebase. Usually this means that the codebase is properly formatted, dangling imports are removed, and basic style checks and tests pass. If these checks don't pass, the commit fails.</p>\n<p>That said, Git hooks can do so much more. As I've mentioned many times, this site, along with <a href=\"//goingindie.tech/\">GoingIndie.tech</a> and <a href=\"http://indiedevlife.fm\">IndieDevLife.fm</a> are static sites. They're just files served by apache. Because of that, both sites aren't able to take advantage of a lot of really cool blog ecosystem features like ping change notifications. These notifications are typically sent from blogging systems to search engines or news aggregators to let those services know that the site's content has been updated (i.e. a new post was just published, etc). These notifications help services more quickly discover and disseminate that new content to users. <a href=\"https://pine.blog/kb/add_external_blog#ping\">Pine.blog supports this feature</a> and Wordpress blogs automatically send these notifications to Google, but my simple static site couldn't.</p>\n<p>Then I realized that Git hooks can solve this problem!</p>\n<p>Both sites are just Git repos that use a <code>post-receive</code> hook to check out the latest version to a directory served by apache. I commit a new set of changes, push those changes to the remote repo on my server, and that hook runs and copies this new version into wherever apache is expecting. All I need to do is add a little snippet of code to that same hook to send Pine.blog a notification, because by definition: whenever a Git commit is received, the site has changed.</p>\n<pre><code># Send an XML-RPC extendedPing notification to Pine.blog\necho \"&lt;methodCall&gt;\n    &lt;methodName&gt;weblogUpdates.extendedPing&lt;/methodName&gt;\n    &lt;params&gt;\n        &lt;param&gt;&lt;value&gt;&lt;string&gt;brianschrader.com&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;\n        &lt;param&gt;&lt;value&gt;&lt;string&gt;https://brianschrader.com/&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;\n    &lt;/params&gt;\n&lt;/methodCall&gt;\n\" | curl -H \"Content-Type: application/xml\" -X POST -d @- \\\n    https://pine.blog/api/xml-rpc/ping\n</code></pre>\n<p>Adding this simple curl script to my <code>post-receive</code> hook did the trick! Now my blog posts will more quickly appear on Pine.blog! Git hooks for the win.</p>", "date_published": "2020-09-27T19:44:00-08:00", "title": "Git Hooks for Fun and Profit", "id": "http://brianschrader.com/archive/git-hooks-for-fun-and-profit/"}, {"author": {"name": "Brian Schrader"}, "url": "http://brianschrader.com/archive/the-little-engine-that-could/", "tags": ["blogging", "programming", "longevity"], "content_html": "<p>I originally wrote the blog engine for this site <a href=\"/archive/the-new-new-cms/\">in 2014</a>. I've added a few little features and fixed a couple of bugs over the years, but most of the code hasn't been touched or improved since it was originally written. Over the past few weeks though, I've improved the engine dramatically. I've fixed a number of  long-standing bugs, improved some of the functionality, and added multi-site and podcasting support. That said most of the code is still identical to how it was in 2014. It's crazy to me just how much value I've gotten out of that code. Not only did it teach me how to make blogging software and helped me get a handle on Python, it has powered every blog post I've written since.</p>\n<p>After nearly 7 years, the site recently needed an overhaul. I wanted to set up a new site for my book at <a href=\"https://goingindie.tech\">goingindie.tech</a> and I originally considered just using Jekyll, or even hand-coding a single HTML page, but I eventually settled on adapting my existing blog engine to support multiple sites using a YAML configuration file. A lot of the site-wide variables were just hard-coded at the top of one of the Python files, so moving them to a YAML config was easy. After a few other fixes were in place, everything just sort of came together. I had two sites working on one blog engine.</p>\n<p>I love seeing how code evolves over time, and how old code changes us in turn. After nearly 7 years, I'm still using the same, old blogging engine writing posts on this site. I try not to embark on refactors very often, mostly because I don't think they're valuable most of the time. But that means that, aside from a few modernizations and improvements, the work I did in 2014 is still paying off.</p>", "date_published": "2020-09-26T23:52:00-08:00", "title": "The Little Engine that Could", "id": "http://brianschrader.com/archive/the-little-engine-that-could/"}, {"author": {"name": "Brian Schrader"}, "url": "http://brianschrader.com/archive/on-uber-lyft-and-labor-law/", "tags": ["uber", "lyft", "ab5", "labor law"], "content_html": "<p>A storm has been brewing in California. No, not the Coronavirus pandemic or the <a href=\"https://www.sandiegouniontribune.com/news/california/story/2020-08-19/northern-california-wildfires-threatening-thousands-of-homes\">massive fires</a>, though both are incredibly important and widespread. California is trying to reign in a few powerful tech industry players. What we're witnessing now may become either a cautionary tale or a key example of just how these battles can be waged in the future against even bigger and more powerful giants.</p>\n<p>Uber and Lyft have both circulated the idea that they will soon halt operations in California after a state judge forced them to comply with A.B. 5, the California law that requires businesses like Uber and Lyft to classify certain workers as employees instead of contractors. The law, which went into effect in January and has been debated for over a year in the state, would force Uber and Lyft to classify most of their drivers as employees. This change would ensure that those drivers maintained a minimum wage, health benefits, and other benefits under state law, none of which are available to contractors.</p>\n<p>After the law went into effect, Uber and Lyft sued and have been both pursuing a legal case and supporting a ballot measure that explicitly excludes ride-share companies from A.B. 5. According to the <a href=\"https://www.sandiegouniontribune.com/business/technology/story/2020-08-20/why-are-uber-and-lyft-threatening-to-shutdown-in-california\">San Diego Union Tribune</a>, in early August a state judge, \"ordered the companies to classify their drivers as employees rather than independent contractors,\" when they'd prefer to wait until the fate of their ballot measure is decided in November. They also argue that they don't have enough time to comply, even though they've been given months before the law went into effect and eight more months afterwards to comply.</p>\n<p>This legal battle is unlike the one waged over the California Consumer Privacy Act (CCPA) which also went into effect recently, and was primarily targeted at data-brokers like Facebook, Google, and others. CCPA, which merely requires a few key, common-sense measures, did not directly hinder the operations of Facebook, Google, or others. It simply made their practices more transparent to users and was slightly annoying for them to implement. A.B. 5 is different. The law represents a fundamental threat to Uber and Lyft's current business model. Both rideshare companies, to varying degrees, rely on huge investor subsidies and loopholes in labor laws to make their business viable. Uber alone, loses over $1.5 billion each quarter. Let that sink in. Both companies are growing, but to do so they require investors to subsidize rates and they rely on underpaid drivers to balance their revenue model. What neither company wants to say, but that is abundantly clear from their reactions, is that they cannot exist as multi-billion dollar companies if they had to comply with California's labor laws, and they can't attract massive amounts of venture capital if they can't grow at current rates. To be fair, I'm sure that Exxon-Mobile, Walmart, Google, and Apple would be far more profitable if they could ignore labor laws too. Paying people a living wage is expensive, as is giving them health care, so companies don't want to do it, but that's why we have these laws.</p>\n<p>During the initial debate of A.B. 5, Uber and Lyft, as well as many other rideshare and delivery apps, made their case to the voters in California and to the legislators that passed the bill, but they lost. Now both companies are threatening to take their ball and go home rather than accept that perhaps their entire business model is flawed and should be fixed. Uber and Lyft could reclassify their workers and still be enormous companies, but not as enormous as they are today, or they could choose to pout telling their users that it's all or nothing. I don't want to see Uber and Lyft leave California or disappear (even though Uber's corporate culture is often disgraceful and cause for separate concern). They offer a useful service. I've used both companies a lot over the years. I've also used Uber Eats, Postmates, Doordash, and other delivery companies to get a burrito and to satisfy a craving for Saag Paneer at 2AM. But that doesn't mean that I think their service is so valuable that they should be immune from laws that other companies are subject to. Taxi companies and delivery drivers have been around for a long time. Those endeavors can be profitable, and they can be mutually beneficial for both the company and the workers. This, however, isn't the framing that Uber and Lyft are building around this debate. In their eyes, either they get a pass on obeying labor law, or they go away. But it's important to remember, that's not the only choice they have. It's not the only path they could take. It is, however, the one they've chosen to take.</p>\n<blockquote>\n<p>I'll just say this: if your company can only exist if it violates civil rights or labor law, then I don't think you should exist.\n- <a href=\"https://pine.blog/u/sonicrocketman/archive/a23fd365-346e-45b1-8762-f73326e6d0b7\">my post on Pine.blog</a></p>\n</blockquote>", "date_published": "2020-08-20T18:34:00-08:00", "title": "On Uber, Lyft, and Labor Law", "id": "http://brianschrader.com/archive/on-uber-lyft-and-labor-law/"}, {"author": {"name": "Brian Schrader"}, "url": "http://brianschrader.com/archive/two-is-better-than-one/", "tags": ["blog", "self", "update"], "content_html": "<p>It finally happened. After 6 years (!) of blogging on this site, I finally felt the need to add a blogroll and sidebar. Changes like this come slowly. For one, I had to update the custom code that runs the site. But it also comes slowly for another reason: it wasn't broken, so why would I fix it? This site has worked fine with a one-column layout for years. It's only now, when I wanted to shove more into the navbar than would comfortably fit, do I feel that I needed to make this change.</p>\n<p>Behind the scenes is the real magic. I now have the ability to feature my posts automatically and publish hidden ü§´ posts that don't appear on the feed, the archive, or the home page. I've wanted that feature for a while and I've basically been hacking something similar together for years to support my about page. Keep watching for more developments.</p>", "date_published": "2020-07-09T02:54:00-08:00", "title": "Two is Better than One", "id": "http://brianschrader.com/archive/two-is-better-than-one/"}], "author": {"url": "https://brianschrader.com", "name": "Brian Schrader", "avatar": "http://www.gravatar.com/avatar/11b074a636e00292c98e3e60f7e16595"}, "icon": "http://www.gravatar.com/avatar/11b074a636e00292c98e3e60f7e16595"}