<?xml version="1.0" encoding="iso-8859-1"?>
<rss version="2.0"><channel><title>BiteofanApple by Brian Schrader</title><link>http://brianschrader.com</link><description>Thoughts, and ramblings about technology, programming, history, and whatever else I'm interested in.</description><lastBuildDate>Mon, 09 Oct 2017 22:31:20 +0000</lastBuildDate><category>programming</category><category>history</category><category>science</category><category>personal</category><category>technology</category><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><image><url>http://www.gravatar.com/avatar/11b074a636e00292c98e3e60f7e16595</url><title>sonicrocketman</title><link>http://brianschrader.com</link></image><item><title>Mini-Rant About Documentation</title><link>http://brianschrader.com/archive/mini-rant-about-documentation/</link><description>&lt;p&gt;I want to talk about documentation. iOS&lt;sup&gt;1&lt;/sup&gt;, Nginx, Python, DRF, Django, Celery, and Postgres have excellent documentation, but documentation only helps when your question is "How does this thing work and what does it do?" Documentation, at least code level docs, are useless when it comes to figuring out what you need in the first place. Celery can tell you how to use Celery, but it isn't as great at telling you why you might need it. I've become convinced that user guides are as, if not more, important than code level documentation, and we as a community need more of them.&lt;/p&gt;
&lt;div class="footnote"&gt;
1. For their credit, iOS and really all of Apple's developer resources have excellent user guides that explain not only how to use a thing, but why and where you might need it (thinking about it, this could be because iOS and macOS have been around long enough to develop these kinds of docs).
&lt;/div&gt;</description><category>development</category><category> programming</category><guid isPermaLink="true">http://brianschrader.com/archive/mini-rant-about-documentation</guid><pubDate>Mon, 09 Oct 2017 15:31:00 -0800</pubDate></item><item><title>todolist</title><link>http://brianschrader.com/archive/todolist/</link><description>&lt;p&gt;I've &lt;a href="/archive/todos-as-a-templating-system/"&gt;talked before&lt;/a&gt; about how I use &lt;code&gt;TODO&lt;/code&gt; comments in my code to lay out what I want to do before actually doing it. To help me keep track of all of these TODOs in my code I wrote a &lt;a href="https://gist.github.com/Sonictherocketman/77dd6cd8fd907dbbc00031acb08f3ba0"&gt;little script yesterday&lt;/a&gt; and I've put it on Github for anyone who's interested.&lt;/p&gt;
&lt;p&gt;The script looks through all of the code (by default Python code) in a given destination directory, greps for the &lt;code&gt;TODO&lt;/code&gt; comments, and prints them nicely in a constantly updated list in the terminal. The output looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Todolist Terminal Window" src="/images/blog/todolist-terminal.png" /&gt;&lt;/p&gt;
&lt;p&gt;Writing this script I learned a couple of new things about terminal commands like how to clear the screen without deleting the scrollback or just printing newlines (i.e. what &lt;code&gt;clear&lt;/code&gt; does). I've put the script in my &lt;code&gt;/usr/local/bin&lt;/code&gt; and called it &lt;code&gt;todolist&lt;/code&gt; so now I can invoke it from anywhere and get a nice little list of what I've put off working on.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/Sonictherocketman/77dd6cd8fd907dbbc00031acb08f3ba0"&gt;todolist on Github &amp;#8594;&lt;/a&gt;&lt;/p&gt;</description><category>code</category><category> bash</category><category> tools</category><category> programming</category><guid isPermaLink="true">http://brianschrader.com/archive/todolist</guid><pubDate>Thu, 28 Sep 2017 14:28:00 -0800</pubDate></item><item><title>Accidental DevOps</title><link>http://brianschrader.com/archive/accidental-devops/</link><description>&lt;p&gt;Since I became a developer, I've always worked on small (3-5) or single-person teams. Even at my current job, I'm the the lead and only full-time developer. In more recent projects (including &lt;a href="https://adventurerscodex.com"&gt;Adventurer's Codex&lt;/a&gt;) this means that I'm the DevOps guy and System Admin as well. I'm by no means an expert in either, but I can do both.&lt;/p&gt;
&lt;p&gt;I started learning how to manage and administer servers when I started this site back in 2012. Back then I never thought that all of those hours spent configuring Apache and PHP would lead to anything, but those countless hours of frustration taught me the basics. Fast-forward 5 years and I'm developing three major projects (two unannounced) and I'm DevOps and SysAdmin for all three. It's crazy to think about.&lt;/p&gt;
&lt;p&gt;I'd highly recommend any new developers to follow the same general path I did: start a project or blog and learn to deploy it yourself. I started with a cheap old-style webhost and FTP, and slowly moved to managing the whole stack on Linode. I'm using Docker on new projects, and for now, I'm scripting my own deploys (though this could change soon if I migrate one project to Ansible).&lt;/p&gt;
&lt;p&gt;As developers it's sometimes easy to forget that we write software that actually runs on some actual hardware in some actual datacenter somewhere. Knowing how to do many of the things that DevOps and SysAdmins do will not only make you a better developer, it gives you the ability to do more on your own. You often don't need tons of layers of software to deploy yours if you know how to do it from the ground up (especially if it's a smaller project). Those tools make it easier sure, but they're not required.&lt;/p&gt;</description><category>devops</category><category> development</category><guid isPermaLink="true">http://brianschrader.com/archive/accidental-devops</guid><pubDate>Tue, 26 Sep 2017 12:30:00 -0800</pubDate></item><item><title>Getting Back on the Horse</title><link>http://brianschrader.com/archive/getting-back-on-the-horse/</link><description>&lt;p&gt;It's been a while since my last post. This whole summer has been an unusually quiet here, and while a number of personal issues have cropped up this summer that derailed me from blogging, I've really just gotten out of the habit of writing regularly. This is me forcing myself back onto that horse. I've got some exciting news coming, and between work and Adventurer's Codex, I've been keeping myself way too busy.&lt;/p&gt;
&lt;p&gt;On the &lt;a href="https://adventurerscodex.com"&gt;Adventurer's Codex&lt;/a&gt; front: we're in the middle of a large refactor caused by our ongoing migration to Webpack which should hopefully fix a bug caused by our fairly primitive current build and deploy system. We're starting to see the light at the end of the tunnel now, and hopefully it shouldn't take much longer before we're back to writing new, cool features. The original build and deploy system was basically a lot of manual work and a shell script. When we wrote it, I had no idea what Webpack was or how to deploy a modern front-end app, now I do. That's what happens when you learn on the go; sometimes you have to step back and fix your past mistakes.&lt;/p&gt;
&lt;p&gt;In my dwindling spare time, I've been working on another project that I hope to announce soon, so look for more to come there.&lt;/p&gt;</description><category>update</category><category> blogging</category><guid isPermaLink="true">http://brianschrader.com/archive/getting-back-on-the-horse</guid><pubDate>Mon, 25 Sep 2017 16:20:00 -0800</pubDate></item><item><title>TODOs as a Templating System</title><link>http://brianschrader.com/archive/todos-as-a-templating-system/</link><description>&lt;p&gt;When I sit down to start a new feature or project the blank page or empty function can be extremely intimidating; a void of infinite complexity. I'm sure lots of developers do this, and maybe most don't realize it, but I've found that &lt;code&gt;TODO&lt;/code&gt; comments are super useful in helping to abstract away nitpicky details and focus on the overall purpose of the code as I'm writing it. Let's say that we want to validate some parameters from an HTTP request and kick off a background task to send an email to a list of requested users. First off, we need to handle the request and kick off the task, but there's a bunch of validation and database queries we need to make before we can do that, and we haven't even written the task function yet, that's where &lt;code&gt;TODOs&lt;/code&gt; come in.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class MassEmailView(APIView)
    # TODO: check if user has permission to send mass mail
    def post(self, request):
        # TODO: Get users from the request
        users = []
        for user in users:
            # TODO: send the message
            pass
        return Response(None, status=200)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Right off the bat I know that I need to get a list of users and do something with each of them. In a lot of ways I'm basically writing pseudo-code and slowly filling in the blanks with real code. Next, let's say we write the background task.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ---- tasks.py ----
@shared_task
def send_email(user, subject, message_text):
    email.send(user.email, subject, text=message_text)

# ---- views.py ----
class MassEmailView(APIView)
    # TODO: check if user has permission to mass send mail
    def post(self, request):
        # TODO: Get users, subject, and text from the request
        users = []
        subject = ''
        text = ''
        for user in users:
            tasks.send_email.delay(user, subject, text)
        return Response(None, status=200)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Slowly the code is coming together. I've written the background task and updated my view. The basic structure is there, but I haven't done the work of parsing the request or any error handling, so let's move on to that.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ---- tasks.py ----
@shared_task
def send_email(user, subject, message_text):
    email.send(user.email, subject, text=message_text)

# ---- views.py ----
class MassEmailView(APIView)
    @authentication_classes((SessionAuthetication,))
    @permission_classes((IsAdmin,))
    def post(self, request):
        try:
            users = [
                User.objects.get(username=username)
                for username in request.POST['users'].split(',')
            ]
        except ObjectDoesNotExist:
            return Response(INVALID_USER_RESPONSE, status=400)

        subject = request.POST['message_text']
        text = request.POST['message_text']
        for user in users:
            tasks.send_email.delay(user, subject, text)
        return Response(None, status=200)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we're done, it's clear that the &lt;code&gt;TODO&lt;/code&gt; comments were hiding quite a bit of complexity, but the overall structure is the same. Just because our code is read by the computer from top to bottom doesn't mean we have to write it that way. Sometimes it helps to start with a rough outline of the whole picture, and slowly color it in bit by bit.&lt;/p&gt;
&lt;p&gt;&lt;link rel="stylesheet" href="https://yandex.st/highlightjs/8.0/styles/default.min.css"&gt;
&lt;script src="https://yandex.st/highlightjs/8.0/highlight.min.js"&gt;&lt;/script&gt;
&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;/p&gt;</description><category>software development</category><category> programming</category><category> thought technology</category><guid isPermaLink="true">http://brianschrader.com/archive/todos-as-a-templating-system</guid><pubDate>Mon, 31 Jul 2017 15:24:00 -0800</pubDate></item><item><title>Climate Change and Guns, Germs, and Steel</title><link>http://brianschrader.com/archive/climate-change-and-guns-germs-and-steel/</link><description>&lt;p&gt;I've been slowly working my way through &lt;a href="https://en.wikipedia.org/wiki/Guns,_Germs,_and_Steel"&gt;Guns, Germs, and Steel&lt;/a&gt; for a while now. It's an interesting read overall, but this one section really got me thinking.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What were the factors that tipped the competetive advantage away from [hunting-gathering] and towards [farming]? ...five main contributing factors can still be identified; the controversies revolve mainly around their relative importance.&lt;/p&gt;
&lt;p&gt;One factor is the decline in the availability of wild foods. The lifestyle of hunter-gatherers has become increasingly less rewarding over the past 13,000 years, as resources on which they depended have become less abundant of even disappeared... most large mammal species became extinct in North and South  America at the end of the Pleistocene, and some became extinct in Eurasia and Africa, either because of climate changes or because of the rise on skill and numbers of human hunters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I've never heard this part of the argument before: that humans may have turned to farming because of the lack of large, huntable animals after the last ice age. It's fascinating to consider that the recent set of the Earth's cycles of natural climate change have not only been more favorable for humans to develop farming and complex civilization, but that they may have also forced our hands in the first place.&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;sup&gt;1.&lt;/sup&gt; And that man-made climate change could be the end of that same civilization.
&lt;/div&gt;</description><category>guns germs and steel</category><category> history</category><guid isPermaLink="true">http://brianschrader.com/archive/climate-change-and-guns-germs-and-steel</guid><pubDate>Sat, 15 Jul 2017 13:42:00 -0800</pubDate></item><item><title>Adventurer's Codex: XMPP</title><link>http://brianschrader.com/archive/adventurers-codex-xmpp/</link><description>&lt;p&gt;You might have noticed in my &lt;a href="/archive/adventurers-codex-the-stack/"&gt;last post in this series&lt;/a&gt; that I mentioned Adventurer's Codex using &lt;a href="http://ejabberd.im"&gt;Ejabberd&lt;/a&gt;. A few of you might even be a little abhorred by the idea that a modern piece of software has even a line of XML running through it, but it's true.&lt;/p&gt;
&lt;h2&gt;But it's XML!&lt;/h2&gt;
&lt;p&gt;XMPP is an old standard these days, and I think it's safe to say that it's earned a reputation for being a very complex and stateful XML-based protocol. But XMPP has also had years of industry giants testing its limits and adding new and improved functionality to the spec. All of that means that the XMPP spec has tons of recommendations and countless extensions which can make it difficult to approach as a newbie, but it also means that nearly anything you need to do with XMPP has already been done.&lt;/p&gt;
&lt;p&gt;In building &lt;a href="https://adventurerscodex.com"&gt;Adventurer's Codex&lt;/a&gt; we wanted to leverage as many server technologies as possible with as little custom logic as we could manage. Nobody on the team wanted to write chat or pubsub functionality, or handle scaling the system with multiple nodes, and we wanted the system to be built on open technologies that support the idea of a standards based Open Web and all of the inter-compatibility that such a web entails. We looked around, and here was this perfectly good, time-tested standard just lying there, waiting for us.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ejabberd.im"&gt;Ejabberd&lt;/a&gt; has lots of great resources and chat rooms out there filled with people that can help you and the majority of commonly used specs like &lt;a href="https://xmpp.org/extensions/xep-0045.html"&gt;Multi-User Chat&lt;/a&gt; and &lt;a href="https://xmpp.org/extensions/xep-0060.html"&gt;PubSub&lt;/a&gt; are very well documented. The server software is robust and adaptable, and the defaults are already pretty good at getting you up and running. Perhaps most importantly, the client-side support for XMPP is really good: The web has &lt;a href="http://strophe.im"&gt;Strophe.js&lt;/a&gt; and all of the native platforms have either built in support or a wealth of Open Source options for speaking XMPP, so expanding support is easy. All of these things came together to make XMPP a worthwhile choice for our needs... even if it's XML.&lt;/p&gt;</description><category>adventurerscodex</category><category> dnd</category><category> software</category><category> xmpp</category><guid isPermaLink="true">http://brianschrader.com/archive/adventurers-codex-xmpp</guid><pubDate>Tue, 11 Jul 2017 13:12:00 -0800</pubDate></item><item><title>Adventurer's Codex: The Stack</title><link>http://brianschrader.com/archive/adventurers-codex-the-stack/</link><description>&lt;p&gt;I figure that if I'm going to write a series of posts about how and why &lt;a href="https://adventurerscodex.com"&gt;Adventurer's Codex&lt;/a&gt; works the way it does, it might be good to first talk about what's actually powering it. It's time to talk about our "stack".&lt;/p&gt;
&lt;p&gt;People like to think that a project's internal technologies are chosen by seasoned professionals who carefully weighed the differences between competing options over the course of months, but from what I've seen it's usually just whatever the first developers on the project liked or already knew how to use and &lt;a href="https://adventurerscodex.com"&gt;Adventurer's Codex&lt;/a&gt; is no different. Before we started we asked around for suggestions on frameworks to use, and when in doubt we used what we'd learned at work. We were not seasoned architects and we didn't spend months deciding, we were (are) anxious developers trying to bring our dream to life.&lt;/p&gt;
&lt;h2&gt;The Stack&lt;/h2&gt;
&lt;p&gt;On the client-side, we went with &lt;a href="http://knockoutjs.com"&gt;KnockoutJS&lt;/a&gt;&lt;sup&gt;1&lt;/sup&gt; and a ton of additional libraries. The trouble with the front-end world is that you essentially have to build up your own OS in the browser. Need notifications, persistence, url parsing, OAuth compatibility, or master-detail view hierarchies? Either you find one, or you build one. In our case, we built a lot. Why we chose to build out so many of our own custom libraries is a story for another time, but we do try to use existing libraries, like &lt;a href="https://github.com/millermedeiros/js-signals"&gt;Signals.js&lt;/a&gt;, &lt;a href="http://strophe.im"&gt;Strophe.js&lt;/a&gt;, and more as often as we can. But when it came to a few crucial things like Persistence and MVC structure, we went our own way.&lt;/p&gt;
&lt;p&gt;The server-side came a lot later in the timeline&lt;sup&gt;2&lt;/sup&gt;, and collectively we have far more experience with the kinds of tech involved. We took the Marco Arment strategy: use the most boring, proven software you can find. We went with &lt;a href="http://www.django-rest-framework.org"&gt;Django REST&lt;/a&gt;, &lt;a href="http://gunicorn-docs.readthedocs.io/en/stable/"&gt;Gunicorn&lt;/a&gt;, &lt;a href="https://github.com/jwilder/nginx-proxy"&gt;Nginx&lt;/a&gt;, &lt;a href="https://www.postgresql.org"&gt;Postgres&lt;/a&gt;, and &lt;a href="http://ejabberd.im"&gt;Ejabberd&lt;/a&gt;, all  inside of &lt;a href="https://www.docker.com"&gt;Docker&lt;/a&gt;, on &lt;a href="https://www.centos.org"&gt;CentOS&lt;/a&gt;, on &lt;a href="https://www.linode.com"&gt;Linode&lt;/a&gt;. Nothing exciting there (except arguably Django REST) which is good.&lt;/p&gt;
&lt;p&gt;Of course, if I could go back in time, there's a &lt;a href="http://knockoutjs.com"&gt;few things I'd change about our client-side tech stack&lt;/a&gt;, but knowing what we did back then, I think we made decent choices.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/archive/adventurers-codex-behind-the-curtain/"&gt;Part 1: Behind the Curtain &amp;#8594;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;sup&gt;1.&lt;/sup&gt; Don't email me. I know "Knockout is Dead". &lt;br /&gt;
&lt;sup&gt;2.&lt;/sup&gt; Until version 1.4, we could get away with hosting on GitHub pages because we had no backend. The app, including it's datastorage, was (and is at time of writing) all done in-browser. More on that in another post.
&lt;/div&gt;</description><category>adventurerscodex</category><category> dnd</category><category> software</category><guid isPermaLink="true">http://brianschrader.com/archive/adventurers-codex-the-stack</guid><pubDate>Thu, 06 Jul 2017 17:28:00 -0800</pubDate></item><item><title>Measuring Sticks</title><link>http://brianschrader.com/archive/measuring-sticks/</link><description>&lt;p&gt;Humans have a notoriously bad grasp of large numbers. We can see that 10 is 9 more than 1 and we have some feeling as to just how much "9 more" really is, but  the difference between 100 and 200 isn't as easy to gauge, let alone 1,000,000 and 1,000,000,000. When I'm dealing with these kinds of huge numbers, I try to boil it down to a simple comparison between things I already know: an iPhone is worth almost 5 months of groceries for example.&lt;/p&gt;
&lt;p&gt;The same approach helps when dealing with historical timelines. &lt;a href="http://waitbutwhy.com/2016/01/horizontal-history.html"&gt;WaitButWhy did something similar a while back&lt;/a&gt; by using generations of people to measure history. For things on a broader timescale, I've started using a few different metrics. For example, Issac Newton died roughly before the founding of the United States&lt;sup&gt;1&lt;/sup&gt;. In fact, if we use the United State's age as a measuring stick, it leads to some interesting comparisons (because it's me, all of the comparisons are going to be to Roman history):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The Fall of the Byzantine Empire&lt;/strong&gt; was (roughly) &lt;strong&gt;twice as long ago&lt;/strong&gt; as the founding of the United States is to today.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Fall of the Western Roman Empire&lt;/strong&gt; was over &lt;strong&gt;six times as long ago&lt;/strong&gt; as the founding of the U.S.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That means that as ancient as we think the Byzantine Empire is today, we're twice as close to them, as they are to the fall of their western half! It's crazy, but using this method we can also compare historical time periods, and this is the meat of what I'm getting at with all this.&lt;/p&gt;
&lt;p&gt;Recently, I've been reading &lt;a href="https://www.amazon.com/SPQR-History-Ancient-Mary-Beard/dp/0871404230"&gt;Mary Beard's fantastic book, SPQR&lt;/a&gt;, and even though I've been down the rabbit hole of Roman History over four other times&lt;sup&gt;2&lt;/sup&gt; I keep finding new fascinating things, and the biggest one is always the sheer scale of the timelines involved. We never really stop to think about just how long the "ancient" world was around compared to our "modern" one. To keep this short, here's an example:&lt;/p&gt;
&lt;p&gt;The founding of the city of Rome is, mythically, 753 BCE, and the toppling of the kings and the establishment of the republic was in 509 BCE. Using our measuring stick from before means that the age of the legendary 7 Kings of Rome was roughly the same as the age of the current United States, and that &lt;strong&gt;the Roman Republic (509 BCE-27 BCE) was, somewhat conveniently, exactly twice as old as the United States is today&lt;/strong&gt;. For completeness, the Empire lasted a bit longer but was also about double the U.S.'s current age (by traditional dating of the fall of the west). All of that comes together to mean that the Roman state, from fiery birth to limping death, lasted &lt;strong&gt;five to nine times longer than the United States&lt;/strong&gt; has been around, depending on which ending date you use.&lt;/p&gt;
&lt;p&gt;Even with all that context, what's really crazy is that the height of ancient Egyptian civilization was over 14 times as long ago as the founding of the United States, or about 2.3 times as long ago as the founding of the Roman Republic. We've all seen that meme that Cleopatra was born closer to the current day than the building of the Pyramids at Giza, but it's also impressive to see just how much closer to us she really is.&lt;/p&gt;
&lt;p&gt;Our popular retelling of the founding of the United States is already starting to become somewhat of a mythical folktale and the founding of Rome is shrouded in unsolvable mystery, so I can only imagine the kinds of stories the Romans told each other about the foundings of the even more ancient to them Egyptians, or near prehistoric kingdoms of Mesopotamia.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;sup&gt;1.&lt;/sup&gt; Yes, I know there's 50 years missing in there, but go with it.&lt;br/&gt;
&lt;sup&gt;2.&lt;/sup&gt; My Roman history tours in chronological order: The History of Rome podcast, The History of Rome by Livy, The History of Byzantium podcast, and full re-listening of the History of Rome.
&lt;/div&gt;</description><category>history</category><category> roman</category><guid isPermaLink="true">http://brianschrader.com/archive/measuring-sticks</guid><pubDate>Mon, 26 Jun 2017 10:37:00 -0800</pubDate></item><item><title>Adventurer's Codex: Behind the Curtain</title><link>http://brianschrader.com/archive/adventurers-codex-behind-the-curtain/</link><description>&lt;blockquote&gt;
&lt;p&gt;Our tale starts as many such tales often do. It was the end of July in the year two-thousand and fifteen by western reckoning and three friends met in a busy tavern in a sleepy neighborhood in San Diego. Their quest: to change the way Dungeons and Dragons would be played forever.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Almost two years ago, I started a project with a few friends that last year we turned into a full-on company: &lt;a href="//adventurerscodex.com/"&gt;Adventurer's Codex&lt;/a&gt;. For no particular reason, I've never spoken about the project here, but I'm going to change that, if nothing but for posterity. Originally I wanted to write a single "What I've learned while building Adventurer's Codex" post, but it got too big and covered so many unrelated topics that I'm just going to have to make it into a series of smaller posts.&lt;/p&gt;
&lt;h2&gt;A Codex, But For Adventurers!&lt;/h2&gt;
&lt;p&gt;For those who don't know: Adventurer's Codex is a web-based toolset for playing 5th Edition Dungeons and Dragons (D&amp;amp;D 5e). It has a number of features for both players and DMs (Dungeon Masters, aka Game Masters) with a focus on real-time, collaborative play. I've played D&amp;amp;D for years, and so have the other two founders, and we all think that while the classic pen-and-paper version of D&amp;amp;D is great, there are some definite improvements to be made.&lt;/p&gt;
&lt;p&gt;If you're interested in &lt;a href="//adventurerscodex.com/"&gt;seeing what Adventurer's Codex can do, checkout the site and try it out&lt;/a&gt;, and if you don't know what D&amp;amp;D is, or you've never played, then I strongly encourage you to try it.&lt;/p&gt;
&lt;h2&gt;No Choice but to Rise to the Challenge&lt;/h2&gt;
&lt;p&gt;Software design has always been interesting to me. I've spent countless hours learning about just how lots of mature projects, like CPython, Cocoa, and iOS, work at the high level, and how their designs limit or enhance their core features. So when it came down to designing Adventurer's Codex, I jumped at the chance. The only trouble was: I'd never actually designed anything so big before; none of us had. And so, like with many projects, the architecture for Adventurer's Codex grew as we did.&lt;/p&gt;
&lt;p&gt;When we started, I had no idea how to professionally set up servers, design modern APIs, or design multi-tier web applications. I had this website, which I was proud of, and in-and-out of my day job I'd built lots of different types of web and native software. Coming from iOS/Cocoa and Java/Spring development at the time meant that I was always accustomed to having a very large, opinionated framework to guide the design of whatever I was building, but when it comes to front-end Javascript, that's just not the case. In the browser, we were forced/free to pick and choose our own tools, libraries, and conventions and because of this, we stumbled a lot in the early days: tearing through three different data storage strategies and three more major code architecture changes. Every one of these experiences taught us something about software design, but it also slowed us down, and nearly burnt me out, but all of that is (hopefully) behind us now.&lt;/p&gt;
&lt;p&gt;Although getting this far has been a huge undertaking, because of the way we chose to develop Adventurer's Codex, we've been able to slowly roll out bits and pieces of infrastructure over almost a year while still having a working product. If I had to give advice for anyone in the same position: ask people who've done it before. A few invaluable people at my local programming meetup group had experience with all of the things I didn't and were more than happy to point me in the right direction. The internet is great, but it's actually pretty difficult to find out how to design modern web systems from scratch with just a vague notion and Google.&lt;/p&gt;
&lt;p&gt;TL;DR: Turns out, designing, architecting, and managing complex software is hard...&lt;/p&gt;
&lt;div class="footnote"&gt;
* Woo, broke the streak!
&lt;/div&gt;</description><category>adventurer's codex</category><category> development</category><category> dnd</category><guid isPermaLink="true">http://brianschrader.com/archive/adventurers-codex-behind-the-curtain</guid><pubDate>Tue, 20 Jun 2017 21:52:00 -0800</pubDate></item></channel></rss>