<?xml version="1.0" encoding="iso-8859-1"?>
<rss version="2.0"><channel><title>BiteofanApple by Brian Schrader</title><link>http://brianschrader.com</link><description>Thoughts, and ramblings about technology, programming, history, and whatever else I'm interested in.</description><lastBuildDate>Mon, 15 Aug 2016 20:01:20 +0000</lastBuildDate><category>programming</category><category>history</category><category>science</category><category>personal</category><category>technology</category><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><image><url>http://www.gravatar.com/avatar/11b074a636e00292c98e3e60f7e16595</url><title>sonicrocketman</title><link>http://brianschrader.com</link></image><item><title>More Efficient VBR MP3s and Podcasting</title><link>http://brianschrader.com/archive/more-efficient-vbr-mp3s-and-podcasting/</link><description>&lt;p&gt;&lt;a href="https://marco.org/2016/08/15/vbr-mp3-plea"&gt;Marco Arment&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I explained how MP3s work, and why this is a problem, on Accidental Tech Podcast last week...&lt;/p&gt;
&lt;p&gt;See for yourself: here&#8217;s that same podcast in VBR. Note that the file is 25% smaller and the theme song (at 1:22:47 in the original file) sounds way nicer in the VBR version. But if you seek to the same timestamp as the above share link &#8212; 1:24:30 &#8212; you&#8217;ll hear the wrong audio. The player will say 1:24:30, but you&#8217;re actually hearing the audio at 1:25:16.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This post is direct follow up to his &lt;a href="https://overcast.fm/+CdTym-vo/1:23:49"&gt;really awesome discussion on ATP&lt;/a&gt; this week about &lt;a href="https://en.wikipedia.org/wiki/Variable_bitrate"&gt;Variable BitRate (VBR)&lt;/a&gt; MP3s and why they're more space-efficient, better sounding, and yet no one uses them. It's a really interesting topic, and as usual, Marco does a great job illustrating the problem and the many possible solutions.&lt;/p&gt;
&lt;p&gt;As with so many things in software, the solutions are rarely limited by technology, they're limited by the standards we use (or don't use).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marco.org/2016/08/15/vbr-mp3-plea"&gt;Why don&#8217;t podcasts use VBR MP3s? Because iOS and macOS don&#8217;t accurately seek them &amp;#8594;&lt;/a&gt;&lt;/p&gt;</description><category>mp3</category><category> podcast</category><guid isPermaLink="true">http://brianschrader.com/archive/more-efficient-vbr-mp3s-and-podcasting</guid><pubDate>Mon, 15 Aug 2016 12:30:00 -0800</pubDate></item><item><title>Tabletop Audio</title><link>http://brianschrader.com/archive/tabletop-audio/</link><description>&lt;p&gt;I really like &lt;a href="http://www.tabletopaudio.com"&gt;Tabletop Audio&lt;/a&gt;. It's a great tool for anyone who's running a Tabletop RPG, or for writers who're looking for atmospheric background music. There's lots of different genres represented (much more than typical fantasy stuff). I've been using the site for a while, but I just discovered the new SoundPad feature.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SoundPad was designed for those of you who wanted more control over your sonic environments. Instead of fire-and-forget 10 minute ambiences, each SoundPad is made up of a few dozen sounds, divided into categories.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I've spent a bit of time today playing with SoundPad, and it's really cool. Instead of hunting for just the right atmospheric music, or just defaulting to the &lt;a href="https://itunes.apple.com/us/album/elder-scrolls-v-skyrim-original/id596951310"&gt;Skyrim soundtrack&lt;/a&gt;, I can tweak and tune the music, and sound-effects in the game. One of the coolest features of SoundPads, and playlists, is the ability to send live links to the music/sounds you're mixing.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tabletopaudio.com"&gt;Tabletop Audio &amp;#8594;&lt;/a&gt;&lt;/p&gt;</description><category>tabletop rpg</category><category> D&amp;D</category><category> audio</category><guid isPermaLink="true">http://brianschrader.com/archive/tabletop-audio</guid><pubDate>Sun, 07 Aug 2016 17:27:00 -0800</pubDate></item><item><title>Primitive Tech tiptoes into the Bronze Age</title><link>http://brianschrader.com/archive/primitive-tech-tiptoes-into-the-bronze-age/</link><description>&lt;p&gt;Once again &lt;a href="https://primitivetechnology.wordpress.com/2016/07/29/forge-blower/"&gt;Primitive Tech&lt;/a&gt; amazes me. If you haven't heard of this YouTube
channel, you should check it out (you should read his blog posts too). So far, 
he's mostly built huts (&lt;a href="https://primitivetechnology.wordpress.com/2015/09/05/building-a-hut-with-a-kiln-fired-tiled-roof-underfloor-heating-and-mud-pile-walls/"&gt;one even had a fireplace&lt;/a&gt;) and primitive tools, but with the latest video, he's taken on building a furnace hot enough to smelt metal. It's super simple in concept, and looks pretty effective. &lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/VVV4xeWBIxE" frameborder="0"
allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;It's amazing what he's able to build with clay and water.&lt;/p&gt;</description><category>youtube</category><category> primitive technology</category><guid isPermaLink="true">http://brianschrader.com/archive/primitive-tech-tiptoes-into-the-bronze-age</guid><pubDate>Fri, 29 Jul 2016 16:18:00 -0800</pubDate></item><item><title>18th Century Cooking</title><link>http://brianschrader.com/archive/18th-century-cooking/</link><description>&lt;p&gt;Every once and a while I come across something on the internet that I don't
know how I ever lived without: &lt;a href="https://www.youtube.com/watch?v=GsyjNef2ydQ"&gt;18th Centery Cooking&lt;/a&gt; is one of those
things (well, that and &lt;a href="https://primitivetechnology.wordpress.com"&gt;Primitive Tech&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The videos have a suspiciously PBS feel, reminicent of shows like &lt;a href="https://blogs.chapman.edu/huell-howser-archives/"&gt;California's Gold&lt;/a&gt; or &lt;a href="http://www.pbs.org/wgbh/nova/"&gt;Nova&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;iframe width="560" height="315"
    src="https://www.youtube.com/embed/GsyjNef2ydQ" 
    frameborder="0" allowfullscreen&gt;
&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;</description><category>youtube</category><category> cooking</category><category> history</category><guid isPermaLink="true">http://brianschrader.com/archive/18th-century-cooking</guid><pubDate>Fri, 22 Jul 2016 21:31:00 -0800</pubDate></item><item><title>Easy Refactoring with Source Making</title><link>http://brianschrader.com/archive/easy-refactoring-with-source-making/</link><description>&lt;p&gt;If you haven't heard of &lt;a href="https://sourcemaking.com"&gt;Source Making&lt;/a&gt;, you should check them out. They
have a lot of really great and simple tips and tricks to help developers write
good code and refactor bad code, and they have lots of practical examples for
each of their techniques.&lt;/p&gt;
&lt;p&gt;Here's two of my favorite tips: &lt;/p&gt;
&lt;p&gt;&lt;a href="https://sourcemaking.com/refactoring/replace-conditional-with-polymorphism"&gt;Replace Conditional with Polymorphism&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This technique adheres to the Tell-Don't-Ask principle: instead of asking an
object about its state and then performing actions based on this, it is much
easier to simply tell the object what it needs to do and let it decide for
itself how to do that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Removes duplicate code. You get rid of many almost identical conditionals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you need to add a new execution variant, all you need to do is add a new
subclass without touching the existing code (Open/Closed Principle). &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://sourcemaking.com/refactoring/replace-nested-conditional-with-guard-clauses"&gt;Replace Nested Conditional with Guard Clauses&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;
You have a group of nested conditionals and it is hard to determine the normal
flow of code execution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;
Isolate all special checks and edge cases into separate clauses and place them
before the main checks. Ideally, you should have a "flat" list of conditionals,
one after the other.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In regards to the first tip, I find myself falling into the trap of if/elsing
though a list of cases just to determine what to do next, or what state to
alter. Unfortunately, a lot of Python libraries are guilty of this practice. 
Replacing each of the cases with concrete subclasses would definitely help 
developers keep track of the various code paths, all while making the code cleaner. &lt;/p&gt;
&lt;p&gt;In keeping with the second tip, one of my favorite features of Swift is its &lt;a href="https://thatthinginswift.com/guard-statement-swift/"&gt;Guard&lt;/a&gt; statement. It keeps the normal execution logic clean, while still allowing the developer to handle rare, or extraordinary cases easily. &lt;/p&gt;</description><category>refactoring</category><category> programming</category><guid isPermaLink="true">http://brianschrader.com/archive/easy-refactoring-with-source-making</guid><pubDate>Tue, 19 Jul 2016 11:58:00 -0800</pubDate></item></channel></rss>